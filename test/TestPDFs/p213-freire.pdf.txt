

manynets: an interface for multiple network analysis and visualization 1,2manuel freire, 2catherine plaisant, 2ben shneiderman, 2jen golbeck 1universidad autónoma de madrid 2university of maryland 28049 madrid, spain college park, md 20742 manuel.freire@uam.es {plaisant,ben,golbeck}@cs.umd.edu abstract traditional network analysis tools support analysts in study- ing a single network. manynets offers these analysts a pow- erful new approach that enables them to work on multiple networks simultaneously. several thousand networks can be presented as rows in a tabular visualization, and then in- spected, sorted and ﬁltered according to their attributes. the networks to be displayed can be obtained by subdivision of larger networks. examples of meaningful subdivisions used by analysts include ego networks, community extrac- tion, and time-based slices. cell visualizations and interac- tive column overviews allow analysts to assess the distribu- tion of attributes within particular sets of networks. details, such as traditional node-link diagrams, are available on de- mand. we describe a case study analyzing a social network geared towards ﬁlm recommendations by means of decom- position. a small usability study provides feedback on the use of the interface on a set of tasks issued from the case study. author keywords network analysis, exploratory analysis, table interface, in- teraction, information visualization, graphical user inter- face acm classiﬁcation keywords h.5.2 information interfaces and presentation: miscellaneous general terms theory, human factors, experimentation introduction the ﬁeld of social network analysis (sna) has recently gained visibility as social networking sites have increased in relevance, numbers and participants. sites with millions of users are now commonplace. analyzing these networks permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page. to copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a fee. chi 2010, april 1015, 2010, atlanta, georgia, usa. copyright 2010 acm 978-1-60558-929-9/10/04...$10.00. helps our understanding of how people interact and commu- nicate. additionally, insights into how users interact within these systems are important to diagnose and improve them, and to develop better systems in the future. exploratory analysis of large networks, such as those found in sna, often starts with visual overviews. whole-network overviews, such as those generated with node-link diagrams or matrix representations, are hard to interpret, especially in the case of large, dense networks. comparing these overviews to gain insights regarding a set of networks is even more dif- ﬁcult. the need to visualize multiple networks at once arises natu- rally in many situations. for instance, analysts may wish to compare social networks for county managers in 3140 u.s. counties to gain insights into the strength of their collabora- tions. subdivision of larger networks is also an important source of multiple networks; for instance, [24] describes the subdivision of an evolving social network by temporal slices, which can then be examined to locate temporal pat- terns or regions and periods change. in biological networks, the distribution of “motifs” (small patterns of connectivity) has been suggested as an indicator of their functional signiﬁ- cance [23]. more generally, analysts can subdivide networks into closely-knit communities or clusters; and, in social net- work analysis, the use of ego-networks to look at individual neighborhoods is well-established. indeed, going one step further, analysts may need to compare groups of networks. they may want to discover if the ego-networks of one social network are similar to those of a different social network, and whether they exhibit similar temporal characteristics. the main contribution of this paper is our approach to net- work analysis: it is the ﬁrst approach that attempts to vi- sualize many networks (up to several thousands) at once. we represent these groups of networks in a table, where each row represents a single network, generally a part of a larger network that has previously been split. conﬁgurable columns contain user-deﬁned statistics. typical columns in- clude link count, degree distribution, or clustering coefﬁ- cient. in this sense, each row of this interface represents the ﬁngerprint of a network, the combination of its cell val- ues for each of the currently-displayed attribute columns. the use of a table allows easy comparisons between rows chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 213


figure 1. manynets displaying a time-sliced cell-phone call network. each row represents the network of calls in a 5-hour period, with a 50% overlap with the previous row (10 rows cover an entire day). rows with more than 40 connected components have been selected by dragging on the “component count” column summary histogram, and are highlighted with a light-green background in the table. each column summary highlights in bright green those values that correspond to currently-selected rows. in the left-most column summary, equally-spaced highlights reveal a temporal pattern. this synthetic dataset is from the vast 2008 challenge [16], and contains 400 nodes and 9834 links. and columns, and can beneﬁt from focus+context techniques such as those found in tablelens [30]. our table visualiza- tion is tightly integrated with a node-link diagram network visualization tool, socialaction [28], allowing on-demand network inspection. a secondary contribution is in the gen- eral ﬁeld of table-based interfaces, in the form of “column summaries”. these are special cells, placed on top of the column headers, that provide an abstract of the contents of their column. the summaries also support direct user inter- action, and reﬂect application state by highlighting values that correspond to currently-selected rows. the next section presents our approach and describes the in- terface in general terms, using a temporal network dataset from the vast 2008 challenge [16] as a guiding exam- ple. after a section on related work, we describe an in- depth case-study using data from the filmtrust social net- work [14]. finally, we present the results of usability study with 7 participants. design of manynets we follow the visual information seeking mantra [33] to introduce the manynets approach to network visualization. the ﬁrst step of this mantra calls for overview ﬁrst. analysts can access two distinct types of overviews. first, rows them- selves act as overviews of the networks that they represent. scalar values, such as vertex (node) count and edge (link) count, are represented with horizontal bars. when there is a distribution of values within each network, such as in the node degree column, the distribution is shown as a histogram in the corresponding cell. for example, in figure 1, the his- tograms that represent the distributions of phone call dura- tions can be seen to be roughly bell-shaped. on top of each column name, column summaries provide the second type of overview. each column summary summarizes the contents of an entire column. in this sense, the set of column sum- maries is an overview of all the networks at once. within summaries, we use miniature histograms to represent dis- tributions of values for both scalar values and distributions. for example, in figure 1, the column summary histogram for call duration shows a much smoother bell curve that con- siders all the distribution values in each network. in the same ﬁgure, a histogram also shows the distribution of scalar val- ues, like edge count, over all networks. analysts can zoom and ﬁlter (the second step of the mantra) collections of networks in several ways. columns can be resized by direct manipulation, and ﬁltered by hiding them using the “column control” (displayed as a small button on top of the scrollbar). sorting can be seen as a special type of ﬁltering. all columns, even those that contain distribu- chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 214


figure 2. details on demand for a degree distribution histogram. in all visualizations in manynets, hovering the pointer over a value displays a tooltip. tions, can be sorted on, and additional “multiple-column” sorting orders can be used. in a semantical sense, it is possi- ble to “zoom” into a given row or set of rows by slicing the network further, revealing ﬁner-grained details. in the case of the dataset of figure 1, it would be interesting to subdi- vide the network further into node neighborhoods (“ego net- works”). this would allow us to focus on the neighborhood of node #200 (a caller that is present in many of the slices, but not directly visible in the table), described in the original dataset as an important lead (see [16]). analysts can ﬁlter out uninteresting networks by selecting rows to be removed or retained. selections can be speciﬁed by clicking on the corresponding rows, through interaction with column sum- maries, or by specifying a custom ﬁlter. we expect analysts to be proﬁcient in the use of spreadsheets; the expressions that are used in column ﬁlters are similar in complexity to those used in spreadsheet formulas. in figure 1, the ex- pression column[’component count’] > 40 results in the currently-displayed selection. finally, details on demand are available by “mousing” (hov- ering the mouse pointer for a few seconds, without clicking) over any part of the interface: this will display a small tool- tip, describing the value or values under the pointer. larger, more detailed views of cell contents or column summaries can be obtained by right-clicking on them: this will display a pop-up window with a larger view, and controls that al- low manipulation of view settings (figure 2). left-clicking any cell selects the corresponding row, and displays its con- tents in a detail panel. the same detail panel keeps track of the currently-selected rows. last but not least, manynets is tightly integrated with socialaction, and any row or set of rows can be opened in socialaction for further inspection as a node-link diagram. socialaction’s interface provides its own facilities for visualizing network overviews, zoom- ing and ﬁltering, and providing details on demand (see [28] for details). for instance, socialaction can use colors to highlight node or links based on attribute values supplied by manynets, and can perform interactive ﬁltering based on these same attributes. figure 3. selecting statistics. choices correspond to columns displayed in figure 1. selecting and adding columns we now review selected manynets features in greater detail. basic network statistics, such as link and node counts, link density, and component counts, are calculated and displayed by default. more computationally expensive statistics (e.g. network diameter) are only added if the user explicitly re- quests them, using the dialog shown in figure 3. some of these statistics return distributions instead of scalar values; distributions are displayed as miniature histograms embed- ded in the main table. there can be four sources for columns. topology-based statistics are those that can be extracted by traversing the net- work, without any additional domain knowledge. domain- dependent link attributes and node attributes deﬁne two ad- ditional sources. in figure 3, the tower attribute refers to the particular cell-phone tower from which the call was made. since these attributes are bound to links or nodes, they nat- urally result in distributions that will be represented as his- tograms. the ﬁnal source for statistics is the user: columns can be deﬁned by entering expressions in python. for in- stance, the edge-vertex ratio (ratio of links to nodes) can be added using column[’edge count’] / column[’vertex count’]. this results in a column indistinguishable from the default “edge-vertex” ratio column (see figure 4). different types of references to columns can be inserted by using suit- able keywords. among others, varcolumn[’col’] inserts the variance of a cell in a column that contains distributions, and maxcolumn[’col’] inserts the maximum. a similar in- terface can be used to specify python expressions for ﬁlters, selections, and sorting-column deﬁnitions. column summaries the column summaries, visible on top of each column of figure 1, provide an overview of the values of their columns. for instance, in figure 1, the distribution of phone call dura- chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 215


figure 4. adding a calculated column using python. abundant exam- ples are available to users, lowering the effort of writing these expres- sions. column references are substituted by their values before they are evaluated. they can be inserted using the drop-down combo boxes, or typed in directly. tions can be seen to follow a bell-shaped distribution, with a minimum of -145 seconds (these “errors” were present in the dataset itself) and a maximum of 2171. column summaries display the minimum and maximum column values under a histogram representing the distribution of values within the column, avoiding the need to query the summary (via tool-tips) or sort on the column. this is especially useful when the number of rows is large. histograms are used to represent column overviews; in the case of columns that al- ready contain histograms in their cells, histograms of his- tograms are generated by aggregating the corresponding dis- tributions. summaries also provide context-dependent information when rows are selected: selecting a set of rows highlights, in all column summaries, the contribution that networks represented by these rows makes towards the overall distribution of val- ues. in figure 1, all slices with more than 40 connected com- ponents have been selected (green background). a tempo- ral pattern can be observed in the column summary of slice ids: the highlighted values (also green) are spaced regularly throughout the summary histogram (which uses the same or- der as the id column). not only do row selections affect col- umn summaries – it is also possible to select rows by inter- acting directly with a corresponding summary. when drag- ging (clicking and holding while moving) the mouse pointer across any of these column summary histograms, all rows that have values in the corresponding value range will be- come selected. this can be used to quickly test for possible dependencies between statistics, and was the method used to select rows in figure 1. ranking columns sorting by a column is an expected feature in table-based interfaces. when the number of networks (and therefore of rows) is large, visually scanning for values is cumbersome and provides no guarantees of not having missed the tar- gets. sorting does not have these drawbacks. however, it is unclear how best to sort on a column that contains dis- tributions. we use the distribution average by default, but it is possible to use different sorting criteria by adding ad- figure 5. using a multiple-criteria sorting column (right). in this case, rows have been sorted by node count (red bar) and link density (green bar). the status bar (bottom of ﬁgure) displays the steps used to obtain the current set of networks. ditional columns to the table. to sort rows by the maxi- mum degree, the user would add a computed column us- ing the expression max(column[’degree’]), and sort this recently-added column instead of the original. to sort on the difference between the maximum and the minimum de- gree, the expression would be max(column[’degree’]) - min(column[’degree’]). manynets also allows users to sort by several attributes at once (columns or user-deﬁned expressions). for instance, we may wish to ﬁnd networks that are both large and dense. sorting ﬁrst by size and then by density will not work when both attributes are not correlated. we address this concern by allowing users to add “multi-criteria sorting columns”. users can create these columns in a similar way to custom columns; instead of being asked for one expression to cal- culate, they have the option to specify several expressions. the resulting column displays the normalized “score” for each expression in a stacked bar (see figure 5). the use of this additional column-type presents several advantages over inserting a conventional python expression column. there is visual feedback on the degree to which each criterion has in- ﬂuenced the total sorting score; and scores are normalized, so that users do not need to take into account the different value ranges for each criterion. additionally, it is possible to adjust the relative weights of each criterion by using the mouse pointer to “stretch” or “shrink” any of the score-bars. the effects of such adjustments are interactively propagated to all other bars. generating sets of networks so far, we have presented the interface from the point of view of a ﬁxed set of networks. there are several ways to arrive at a set of networks to analyze. the most straight- forward is to load the networks directly: there are many sit- uations where users need to analyze and compare numbers of independent networks (e.g. citation networks in differ- ent scientiﬁc domains, or internal communication in differ- ent companies). it is also possible to decompose a single network into a set of networks. finally, subdividing a set of networks into yet more networks also makes sense. for ex- ample, time-slicing several temporal networks would allow chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 216


the temporal patterns of each to be compared. we propose four methods to derive interesting sets of networks from a previous set: ego-based, clustering, attributes, and feature- based subdivisions. ego networks are, due to their signiﬁcance in social net- work analysis, an important case. the deﬁnition of ego net- works (a network centered on an individual) allows two de- grees of freedom: the radius around the central individual, and whether or not connections between non-central neigh- bors should be included. both are accepted as a parameters when splitting networks with manynets; the default is to split by radius 1, including neighbor-neighbor links. this is often referred to as “radius 1.5”. notice that any single node will, in general, appear in multiple networks: once as a cen- tral node, and once again per connected edge. likewise, all edges will appear in exactly two networks. sets of derived networks in manynets frequently share nodes and edges. clustering-based subdivisions take into account the regions of strong connectivity found in the network. there is consid- erable literature on graph clustering and community-ﬁnding algorithms (for instance, see [37] or [25]). we have imple- mented network subdivision into connected components, ar- guably the simplest of clustering algorithms, and intend to add further algorithms in future revisions. in attribute-based subdivision, the network is divided ac- cording to the value of an attribute; each resulting subnet contains only a particular value or value-range for the cho- sen attribute. if a network has a temporal dimension, as is frequent in social networks, it is possible to “slice” the net- work along the time axis, adopting the terminology of [24]. slices can be instantaneous, capturing a snapshot of the net- work at a given moment in time, or they can span time- windows (the value-range scenario), containing the union of all the slices within that time-window. additionally, it is possible to generate the slices so that they partially over- lap. overlapping slices provide context for evaluating small changes, which would not be present with thinner and non- overlapping slices. a set of time-sliced networks sorted by time allows temporal patterns to be located with the tool, as illustrated in figure 1. local feature-based subdivisions attempt to extract all the instances of a network feature. for instance, it is possible to build collections of all the connected dyads or triads in a given graph; these are a particular case of so-called “net- work motifs”. in the context of biological networks, motif distribution has been proposed as an indicator of functional signiﬁcance [23]. currently, manynets only supports the ex- traction of triads and dyads. in the future, we may want to imitate a motif-speciﬁcation interface similar to that found in [31]. related work many systems have been developed to aid with social net- work analysis, and network analysis in general. henry and fekete [18] broadly classify them into those that provide frameworks that need to be extended via programming (such as jung[27], graphviz [12] and prefuse [17]), and those that can be directly used by means of graphical user inter- faces (for instance pajek [6], ucinet [7], tulip [3] or so- cialaction [28]). some systems fall in-between, such as guess [2] and ggobi [36]. guess allows access to a host of ﬁltering and highlighting capabilities through built- in python scripting, and ggobi can interface with the r statistical package. the above tools rely almost solely on node-link diagrams. matrix representations are less used, but better for performing certain tasks on dense networks [13]. an interface that is explicitly designed to use both visualizations is described in [18]. when comparing gen- eral network structure, however, both matrix and node-link representations make poor overviews: there are too many degrees of freedom, and even two structurally identical net- works are likely to result in very different representations. a canonical representation based on network connectivity that addresses this problem is presented in [5]. efforts to make large, dense node-link diagrams simpler by abstracting the parts of the network furthest from a user- deﬁned focus can be found in [40] and [38], among others. exploratory analysis is then driven by a top-down method- ology, drilling into areas in order to access details. however, this approach makes it difﬁcult to spot low-level patterns that may be distributed throughout the network: they would be hidden under layers of abstractions. the use of several statistics to represent a network or a sub- net is frequent throughout the literature. an example of a “network ﬁngerprint” can be found in [39]; in this case, ﬁn- gerprints refer to a small node-link diagram of an ego net- work and bar-charts for in-degree and out-degree during a user-deﬁned time window. additionally, canonical represen- tations such as the portraits proposed in [5] can be used in the same fashion. in [8], brandes makes a case for the use- fulness of combining different statistics to better understand individual networks. leskovec [21] and kumar [20] use dif- ferent types of plots to compare a handful of social networks, and their temporal evolution, to one another. the collection of plots for a single network can be seen as a “ﬁngerprint”, and has been used as inspiration in manynets. we have not found any prior art where the network ﬁngerprints are ar- ranged in a table for easy comparison and sorting. however, tables of subnetworks that correspond to a query, without ad- ditional attributes, are used in [11]. outside of the ﬁeld of network analysis, the hierarchical clustering explorer [32] presents a powerful interface for visualizing relationships between the multiple attributes (columns) of a large set of elements (rows); several features of hce will be added to future versions of manynets (see section on future work). tables are known for their information density, and much research has gone into building better table presentations or dealing with screen-size limitations; well-known exam- ples are tablelens [30] and infozoom [35]. this research is gradually ﬁnding its way into mainstream applications. for instance, recent versions of microsoft excel can dis- play scalars with horizontal bars. the column summaries found in manynets are similar in concept to the rows of info- chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 217


zoom’s “overview mode” (infozoom uses rows for dimen- sions, instead of columns). within column summaries, our use of overlays to highlight the values of currently-selected rows was partly inspired by [10]. the spreadsheet metaphor is another well-known success story in human-computer in- teraction. it allows users to easily extend an analysis by al- lowing any cell to build on the contents of other cells; in this sense, we allow columns to build on the contents of exist- ing columns. most spreadsheet systems limit cell contents to single elements, generally numbers or strings. several research systems have gone beyond these limitations, allow- ing display and computation with complex elements as cell values [29, 9]. in [9], different thumbnail-sized views of a single evolving network are displayed as node-link diagrams in individual cells. a different approach is that of nodexl [1], where a commercial spreadsheet has been extended to provide single-network visualization, directly exposing ta- bles of nodes and edges to users as spreadsheet pages. figure 6. overview of the filmtrust network (described below), us- ing socialaction. directed links are colored according to their “trust” attributes, with red highest and blue lowest. case study: filmtrust trust networks are social networks augmented with trust in- formation. links are directed and labeled with the trust that the source user has for the sink user. trust can be binary or scored on a discrete or continuous scale. these networks have been used in the computing literature in two ways. first, trust inference is an important problem; when two users are not directly connected, trust inference algorithms approx- imate a trust value between them (see [15] for a survey). secondly, trust has been used to improve the ways users in- teract with information. it is a tool for personalization and has been applied to generating movie recommendations [14, 26], to assigning posting permissions in online communities [22], to ﬁnding safe mountain ski routes [4], to improving the performance of p2p systems [19], and to sorting and ﬁl- tering blog posts [22]. for this analysis we used the trust network that underlies the filmtrust website [14]. filmtrust is an online social network where users rate and review movies and also rate how much they trust their friends about movies. trust is assigned on an integer scale from 1 (low trust) to 10 (high trust). friendship and trust are not required to be mutual relationships; user a can add user b as a friend without b’s approval or reciprocation. trust ratings are also asymmetric; users’ trust values for one another are independent and can be very different. the filmtrust network has been online since 2005 and contains 666 nodes and 1396 links with one giant component and 69 much smaller components. figure 6 is an overview of the network generated by loading it into manynets and then displaying it with socialaction. a few interesting patterns are visible, but there is no way to analyze the dense central cluster without decomposing it into smaller networks. analysis the analysis was performed by one of the authors, with a long experience in the domain of trust networks. it was split into two sessions of 4.5 and 3 hours, during which she kept careful logs of her observations, documenting 10 distinct hy- potheses in the ﬁrst analysis session and 5 in the second, which was more focused. first, she examined the node-link diagram. the next step was to split the network into all “1.5” ego networks (each containing a center node, its immediate neighbors, and all links from center to neighbors or between neighbors), and examine the results within the tool. a look at trust distribu- tions reveals a high rate of “maximum” values, and generally low rates of low-to-mid values, as predicted by previous re- search in ratings. when sorting the ego networks by size, she observed that large ego networks are overrepresented among the low id numbers (see highlights in the id column sum- mary in figure 7); this is to be expected, and is often referred to as “preferential attachment”. initially, our expert relied mainly on sorting and ﬁltering to browse for insights in distributions, and to look for “inter- esting” networks. for instance, user #345 (second-to-last row of figure 7) stands out, with connections to 16 neigh- bors, all of them strangers to each other, and the minimum trust value assigned to each of these neighbors. after sorting by trust and ﬁltering out the smallest ego networks, it be- came apparent that few ego-networks of more than 5 nodes had high trust values throughout; this prompted a hypoth- esis: does trust tend to be symmetric between users? this is most easily observed in cliques, which can be located by ﬁltering by edge density. all 1.5 ego-network cliques were of size 2 (dyads) except for 2 triplets. examining the trust differences showed very similar trust values in these little pairs. however, by starting with ego-networks, only pairs of users disconnected from the main component were shown; this did not represent other dyads present in the graph. for the next analysis session, we added the possibility to split a network by dyads and triads, and a mechanism to visualize many network-rows simultaneously within socialaction. chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 218


figure 7. the “1.5” ego networks in the filmtrust dataset ranked by size. the 20 largest have been selected, and the pop-up window is displaying a larger version of the summary column for the trust attribute. notice the different distribution in trust among the selected rows as compared with the global distribution. the summary for the id column shows that the selected rows are unevenly distributed, due to preferential attachment. the ﬁrst step in the second analysis session was a compari- son of trust in isolated pairs with trust in all pairs of nodes in the network. while trust assigned by isolated pairs (from ego networks) follows the same distribution as trust assigned among all pairs, isolated pairs seem to assign fewer mid- dle range values. an interpretation is that participants either trust each other’s criteria regarding ﬁlms or they do not, with little need for middle ground. the same experiment, com- paring 3-vertex ego networks to all triplets, yields stronger results: isolated groups of three tend to have signiﬁcantly more trust with each other than do groups of 3 embedded within larger components (see figure 8). this lead to a sim- ilar question about how trust was distributed in tightly clus- tered groups. indeed, there appears to be no correlation be- tween trust and edge density, except when the group is iso- lated. by selecting the top-20 largest ego-networks (figure 7), the trust distribution can be seen to be signiﬁcantly lower (especially regarding high ratings) than the general distribu- tion. a second hypothesis was to test the “transitivity” of trust. if a trusts b and c very highly, trust between b and c can be expected to be equally high. in this analysis, she noted the need for sorting by distribution “similarity”, prompting us to develop of additional statistics for user-deﬁned columns (such as trust variance). using a combination of the table view and socialaction visualization, she found that trust did not follow any sort of transitivity. trust values between b and c in this example varied widely and independently from the values assigned by a. figure 8. a triplet with asymmetric trust values. red arrows indicate high trust, blue arrows indicate low trust. outcome our analysis of the filmtrust network began with two ma- jor questions that follow from conventional wisdom. first, since trust (in this particular domain) reﬂects a similarity in tastes, do nodes trusted by the same people trust one an- other? secondly, and a related point, does trust increase in strongly connected sub-groups? as we pursued answers to these questions, we made several additional insights. we found that conventional wisdom does not hold in this trust network. two nodes that are trusted by a person do not necessarily trust one another (see ﬁgure 8 for an example). chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 219


secondly, tightly clustered groups do not have higher lev- els of trust than the general population; within these groups trust tends to follow the same distribution as it does overall. these results have signiﬁcant implications for research into trust networks and will be directly applicable to improving trust inference algorithms, building trust network simulators, and designing better trust-based interfaces. in a matter of hours our trust network expert was able to learn to use the tool, answer dozens of questions, and make signiﬁcant discoveries in a dataset she was already familiar with: all insights described in this paper were previously un- known to her. while results of case studies are difﬁcult to generalize, we believe, in the spirit of [34], that they are a valuable tool when evaluating complex analytic tools such as manynets. usability study we carried out a pilot usability study with 7 participants to identify opportunities for improvement. all had computer science background but no previous network analysis ex- perience. our goal was to understand the use of the inter- face by novice users, and to guide the development of train- ing materials for future users. we asked our participants to think aloud while performing actions, and to describe any problems as they encountered them. before attempting the actual tasks, participants were asked to watch an 8-minute video describing the problem domain and the general use of the tool. participants were then asked to familiarize them- selves with the tool by performing a set of common opera- tions (split a network, rank columns, and write a ﬁlter), and were provided with reference documentation that they could use at any time during the actual tasks. our tasks were based on those that our analyst performed when studying the filmtrust dataset. using this same dataset, participants were asked to: 1. find a pair of nodes that have rated each other with the largest difference in their trust values, and estimate how many such pairs can be found in the whole network. 2. find the densest 1.5 ego network with more than 3 nodes. 3. find the 1.5 ego network with more than 3 nodes that has the lowest average trust among the nodes. 4. find a group of three nodes (not necessarily an ego net- work) with at least one high trust rating (> 8) and at least one low trust (< 3) rating. 5. describe any difference in the the distribution of trust val- ues in 1.5 ego networks with 4 nodes compared to the dis- tribution among all 1.5 ego nets. 6. find a group of at least three nodes where one node has given a rating > 5 to a neighbor and that neighbor’s recip- rocal rating is < 5. results participants required around 30 minutes of hands-on experi- ence before becoming proﬁcient with the tool, as evidenced figure 9. closeup of the details-on-demand panel, shown after selecting the ﬁrst two rows of by dragging on their trust values. by faster task execution and greater feeling of control when faced with the last tasks. this prompted us to extend our initial training, and underlines the need for providing real- world examples of tool use in training materials. early par- ticipants also requested more context on the signiﬁcance of our choice of tasks for real-world analysis; a motivation sec- tion was provided to later participants. participants chose different ways of accomplishing the same tasks. for instance, some participants preferred to ﬁlter net- works into different views, and then work with the ﬁltered views, while others added user-deﬁned columns and ranked on the new column’s values. once they found a satisfying approach, participants tried to extend it to any further tasks, even though alternatives would have proven more effective. this suggests that future training materials should expose users to different styles of analysis, highlighting the most effective methods for different tasks. several usability issues were identiﬁed. most participants preferred the use of a details-on-demand panel that was al- ways visible (figure 9) to the pop-up details-on-demand di- alog (figure 2) which had to be manually dismissed. as a result, newer versions of manynets merge both features into an enhanced details-on-demand panel. participants also requested the possibility to drag-select rows on the (larger) column overviews found in the details-on-demand panel. fi- nally, the expression syntax now includes better error report- ing, and multi-criteria columns are now more discoverable. three participants asked for the possibility of accessing the individual components of networks. in particular, for task 6, it seemed more natural to access the attributes of individual nodes by querying for them directly, instead of having to deal with a distribution of values as seen from a network perspective. addressing this concern would require us to allow direct access to the underlying data, which could again be represented as a table of nodes or edges, similar to those used in nodexl [1]. chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 220


future work and conclusion one of the most natural behaviors when confronted with a set of elements is to look for similarities and differences. it would be useful to calculate and display intra-group sim- ilarity, based on user-deﬁned criteria (for instance, graph edit distance). graphically displaying similarities (as seen in hce [32]) would allow identiﬁcation of clusters of related networks, and provide interesting overviews of their internal structure. clusters could then be used as criteria for network subdivision, allowing additional observations to be made. we plan to add support for bipartite networks; this would al- low us to compare the trust values in the filmtrust network with the actual ratings that the users gave to the ﬁlms in the system’s database. exposing ﬁlm ratings together with trust values may help to understand the way trust is assigned. ad- ditionally, our analysis were done considering only a recent snapshot of the network. using timestamp-data may provide further insights. we have described manynets, an interface to visualize sets of networks, and presented a case study where the interface was used to make new discoveries in the filmtrust network dataset. this case study demonstrated the effectiveness of our interface in a representative social network analysis task, leading to insights and suggesting new research av- enues within trust networks. the usability study has identi- ﬁed several areas for improvement, and suggested additional features. many of the comments received during both stud- ies are ﬁnding their way into manynets. we believe that manynets opens new ways of analyzing large social net- works, and other collections of complex networks. acknowledgments the ﬁrst author is supported by a mec/fulbright scholar- ship (reference no. 2008-0306). partial support for this research was provided by lockheed martin corporation. we particularly thank brian dennis for providing motivating sce- narios for manynets and feedback on our designs, and cody dunne and john guerra for technical insights. finally, we wish to thank the anonymous reviewers for their comments. references 1. nodexl website. http:/www.codeplex.com/nodexl. last visited, sep. 2009. 2. e. adar. guess: a language and interface for graph exploration. in chi ’06: proceedings of the sigchi conference on human factors in computing systems, pages 791–800, new york, ny, usa, 2006. acm. 3. d. auber. tulip — a huge graph visualization framework. in m. jünger and p. mutzel, editors, graph drawing software, mathematics and visualization, pages 105–126. springer-verlag, 2004. 4. p. avesani, p. massa, and r. tiella. a trust-enhanced recommender system application: moleskiing. in sac ’05: proceedings of the 2005 acm symposium on applied computing, pages 1589–1593, new york, ny, usa, 2005. acm. 5. j. p. bagrow, e. m. bollt, j. d. skufca, and d. ben avraham. portraits of complex networks. epl, 81(6):68004, mar. 2008. 6. v. batagelj and a. mrvar. pajek-program for large network analysis. connections, 21(2):47–57, 1998. 7. s. borgatti, m. everett, and l. freeman. ucinet for windows: software for social network analysis. harvard: analytic technologies, 2002. 8. u. brandes, p. kenis, and d. wagner. communicating centrality in policy network drawings. ieee trans. vis. comput. graph, 9(2):241–253, 2003. 9. e. h. chi and s. k. card. sensemaking of evolving web sites using visualization spreadsheets. in proc. ieee symposium on information visualization (info vis ’99), pages 18–25, 142, 1999. 10. h. dawkes, l. a. tweedie, and b. spence. vicki: the visualisation construction kit. in avi ’96: proceedings of the workshop on advanced visual interfaces, pages 257–259, new york, ny, usa, 1996. acm. 11. p. durand, l. labarre, a. meil, j.-l. divo1, y. vandenbrouck, a. viari, and j. wojcik. genolink: a graph-based querying and browsing system for investigating the function of genes and proteins. bmc bioinformatics, jan. 17 2006. 12. j. ellson, e. gansner, l. koutsoﬁos, s. north, and g. woodhull. graphviz-open source graph drawing tools. graph drawing, 2265:483–485, 2001. 13. m. ghoniem, j. fekete, and p. castagliola. on the readability of graphs using node-link and matrix-based representations: a controlled experiment and statistical analysis. information visualization, 4(2):114–135, 2005. 14. j. golbeck. generating predictive movie recommendations from trust in social networks. in proceedings of the fourth international conference on trust management, pages 93–104. springer, 2006. 15. j. golbeck. the science of trust on the web. foundations and trends in web science, 2008. 16. g. grinstein, c. plaisant, s. laskowski, t. oconnell, j. scholtz, and m. whiting. vast 2008 challenge: introducing mini-challenges. in ieee symposium on visual analytics science and technology, 2008. vast’08, pages 195–196, 2008. 17. j. heer, s. k. card, and j. a. landay. prefuse: a toolkit for interactive information visualization. in chi ’05: proceedings of the sigchi conference on human factors in computing systems, pages 421–430, new york, ny, usa, 2005. acm. 18. n. henry and j. fekete. matrixexplorer: a dual-representation system to explore social networks. ieee transactions on visualization and computer graphics, 12(5):677–684, 2006. chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 221


19. s. d. kamvar, m. t. schlosser, and h. garcia-molina. the eigentrust algorithm for reputation management in p2p networks. in www ’03: proceedings of the 12th international conference on world wide web, pages 640–651, new york, ny, usa, 2003. acm press. 20. r. kumar, j. novak, and a. tomkins. structure and evolution of online social networks. in t. eliassi-rad, l. h. ungar, m. craven, and d. gunopulos, editors, kdd, pages 611–617. acm, 2006. 21. j. leskovec, l. backstrom, r. kumar, and a. tomkins. microscopic evolution of social networks. in kdd ’08: proceeding of the 14th acm sigkdd international conference on knowledge discovery and data mining, pages 462–470, new york, ny, usa, 2008. acm. 22. r. levien and a. aiken. attack-resistant trust metrics for public key certiﬁcation. in 7th usenix security symposium, pages 229–242, 1998. 23. r. milo, s. shen-orr, s. itzkovitz, n. kashtan, d. chklovskii, and u. alon. network motifs: simple building blocks of complex networks. science, 298:824–827, 2002. 24. j. moody, d. mcfarland, and s. benderdemoll. dynamic network visualization. american journal of sociology, 110(4):1206–1241, 2005. 25. m. e. j. newman and m. girvan. finding and evaluating community structure in networks. physical review e, 69:026113, aug. 11 2003. 26. j. o’donovan and b. smyth. trust in recommender systems. in iui ’05: proceedings of the 10th international conference on intelligent user interfaces, pages 167–174, new york, ny, usa, 2005. acm. 27. j. o’madadhain, d. fisher, p. smyth, s. white, and y. boey. analysis and visualization of network data using jung. journal of statistical software, 10:1–35, 2005. 28. a. perer and b. shneiderman. integrating statistics and visualization: case studies of gaining clarity during exploratory data analysis. in chi ’08: proceedings of the twenty-sixth annual sigchi conference on human factors in computing systems, pages 265–274, new york, ny, usa, 2008. acm. 29. k. w. piersol. object-oriented spreadsheets: the analytic spreadsheet package. in ooplsa ’86: conference proceedings on object-oriented programming systems, languages and applications, pages 385–390, new york, ny, usa, 1986. acm. 30. r. rao and s. k. card. exploring large tables with the table lens. in chi 95 conference companion, pages 403–404, 1995. 31. f. schreiber and h. schwobbermeyer. mavisto: a tool for the exploration of network motifs. bioinformatics, 21(17):3572–3574, aug. 22 2005. 32. j. seo and b. shneiderman. knowledge discovery in high-dimensional data: case studies and a user survey for the rank-by-feature framework. ieee transactions on visualization and computer graphics, 12(3):311–322, may/june 2006. 33. b. shneiderman. the eyes have it: a task by data type taxonomy for information visualization. in proceedings of the ieee workshop on visual language, pages 336–343, 1996. 34. b. shneiderman and c. plaisant. strategies for evaluating information visualization tools: multi-dimensional in-depth long-term case studies. in beliv ’06: proceedings of the 2006 avi workshop on beyond time and errors, pages 1–7, new york, ny, usa, 2006. acm. 35. m. spenke. visualization and interactive analysis of blood parameters with infozoom. artiﬁcial intelligence in medicine, 22(2):159–172, 2001. 36. d. f. swayne, d. t. lang, a. buja, and d. cook. ggobi: evolving from xgobi into an extensible framework for interactive data visualization. computational statistics & data analysis, 43(4):423–444, 2003. 37. s. van dongen. graph clustering by ﬂow simulation. master’s thesis, center for mathematics and computer science (cwi), 2000. 38. f. van ham and j. j. van wijk. interactive visualization of small world graphs. in proceedings of the ieee symposium on information visualization (infovis’04), pages 199–206, washington, dc, usa, 2004. ieee computer society. 39. h. welser, e. gleave, d. fisher, and m. smith. visualizing the signatures of social roles in online discussion groups. the journal of social structure, 8(2), 2007. 40. p. c. wong, h. foote, p. mackey, g. c. jr., h. j. soﬁa, and j. thomas. a dynamic multiscale magnifying tool for exploring large sparse graphs. information visualization, 7(2):105–117, 2008. chi 2010: visualization april 10–15, 2010, atlanta, ga, usa 222
