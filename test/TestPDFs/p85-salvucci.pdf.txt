

multitasking and monotasking: the effects of  mental workload on deferred task interruptions    dario d. salvucci and peter bogunovich  department of computer science  drexel university  3141 chestnut st.  philadelphia, pa 19104, usa  salvucci@cs.drexel.edu    abstract  recent research has found that forced interruptions at points  of higher mental workload are more disruptive than at points  of lower workload. this paper investigates a complementary  idea: when users experience deferrable interruptions at points  of higher workload, they may tend to defer processing of the  interruption until times of lower workload. in an experiment,  users performed a mail-browser primary task while being  occasionally interrupted by a secondary chat task, evenly  distributed between points of higher and lower workload.  analysis showed that 94% of the time, users switched to the  interrupting task during periods of lower workload, versus  only 6% during periods of higher workload. the results  suggest that when interruptions can be deferred, users have a  strong tendency to “monotask” until primary-task mental  workload has been minimized.  author keywords  multitasking, interruption, attention, problem state, chat,  instant messaging.  acm classification keywords  h.5.2. user interfaces: theory and methods; h.1.2 user/  machine systems: human factors, information processing.  general terms  human factors, design  introduction  computer users switch tasks extremely frequently, roughly  every few minutes by one estimate [9]. researchers have  focused especially in the last decade on investigating the  nature of task switching and interruptions and their many  effects on user behavior and performance. one consistent  finding is that task interruptions lead to a decrease in  primary-task performance, most notably in terms of a  resumption lag representing the additional time needed to  resume the primary task after interruption [17, 20]. another  robust finding is that the timing of interruptions can affect  performance: interruptions occurring at points of higher  mental workload are more disruptive and lead to larger  resumption lags than those occurring at points of lower  mental workload [1, 3, 5, 6, 12].  in this paper we make a complementary claim: when users  are alerted to interruptions at points of higher mental  workload, they delay processing of the interruption until they  have reached a point of lower mental workload. most  experimental work has used forced interruptions in which  either the system displaces the primary task with a secondary  task at a pre-specified time [1, 12, 17, 20], or participants are  asked to respond immediately to an interruption [5, 6]. in  contrast, many interruptions are deferrable interruptions: an  external trigger notifies the user of a pending interruption,  but the user may delay processing of the interruption until he  or she reaches a desirable stopping point in the primary task.  a few recent studies [6, 13, 16, 21] have suggested that, for  deferrable interruptions, users indeed tend to “stabilize task  state” [13] before responding. however, these studies did not  carefully control mental workload, but analyzed workload  informally or using hierarchical task models [e.g., 1].  we ran an experiment to test the above claim using an  electronic mail customer-support task as the primary task and  a chat (instant messaging) task as the interrupting secondary  task. mental workload was carefully controlled for the mail  task by requiring that users mentally maintain a critical piece  of information during two segments of the task. this type of  temporary task-relevant information, which we call the  problem state [18], has been found to act as a constraining  bottleneck on multitasking performance: cognition can only  maintain problem-state information for one task at a time [2],  and thus task switching incurs additional costs from  swapping problem states [4]. the problem-state bottleneck  suggests that users will monotask—focus exclusively on the  primary task—until task problem state has been eliminated  (or at least minimized). our experiment tests this hypothesis  by examining whether users, having received an interrupting  chat message, process and respond to the message only at  points of minimal mental workload in the primary mail task.  experiment  the mail task was a customer-service task in which the user  answered emails about consumer products and prices. the    permission to make digital or hard copies of all or part of this work for  personal or classroom use is granted without fee provided that copies are  not made or distributed for profit or commercial advantage and that copies  bear this notice and the full citation on the first page. to copy otherwise,  or republish, to post on servers or to redistribute to lists, requires prior  specific permission and/or a fee.  chi 2010, april 10–15, 2010, atlanta, georgia, usa.  copyright 2010 acm  978-1-60558-929-9/10/04....$10.00.    chi 2010: multitasking april 10–15, 2010, atlanta, ga, usa 85


mail and other system windows are shown in figure 1. the  user first selected and read an email, each of which asks for  the price of a particular product. the products were  generated using real manufacturers with fictitious model  numbers comprising one letter and two digits (e.g., “canon  h-44,” “sony m-76”). to find the price of a product, the  user switched to a browser window and clicked on (1) the  manufacturer, and then (2) the model number. with the price  shown on the resulting browser page, the user pressed a  button on the mail interface to reply to the email, opening a  message composition window. the user then typed the price  and clicked a button to send the message. finally, the user  dragged the replied-to email to an archive folder.  the manipulation of mental workload was incorporated  into the mail task by requiring the maintenance of  temporary information, or problem state, during certain  stages of the task. after reading the email product  information, the user had to remember this information  while finding the price in the browser. (users were  instructed not to use copy/paste.) then, after reading the  price, the user had to remember this price while initiating  and typing out the response email. the basic steps of the  mail task are shown in figure 2 (discussed further in the  next section). the steps depicted as white ovals indicate  points at which there is no problem state; for example, the  user did not need to remember information to select an  email, but only needed to read and maintain product  information before proceeding to the next step. thus, these  steps represent points at which a user-delayed interruption  would be more likely. in contrast, the steps depicted as gray  ovals indicate points at which information did need to be  maintained, making user-delayed interruption less likely.  the chat task was based on a standard messaging interface in  which messages were shown sequentially, shown in  figure 1. occasionally, a system-generated prompt message  would arrive in the chat application. the messages asked a  question about whether the user had seen a film (randomly  selected from the 5 academy award best picture nominees  from the past 10 years). half of the time, a follow-up  question asked whether the user liked or would like to see  “it”—that is, the user had to recall what film was mentioned  in the last message, and this last message was not visible    figure 1: screen shots of the mail, browser, and chat windows. (note: in the experiment, these windows were sized and positioned  to overlap to a large degree, forcing the user to switch between windows and thus recording these task-switching actions.)      figure 2: the most common sequence of steps in the mail task (upper sequence), and two alternate sequences (a1 and a2).  steps depicted in gray require maintenance of problem state; steps depicted in white do not.  chi 2010: multitasking april 10–15, 2010, atlanta, ga, usa 86


(though the user could scroll up to see it); thus, the chat task  had its own problem-state information (the current film being  discussed) which could potentially interfere with the mail  task. when a prompt message arrived, the chat interface  alerted the user to the message by generating an audible alert  and coloring the background of the chat window yellow.  users were instructed to respond to the chat message as soon  as they felt comfortable. to respond to the message, the user  had to switch to the chat window (the message content was  not visible otherwise) and enter “yes” or “no” in response to  the question.  the overall task environment was coded in java swing to  emulate the standard macintosh applications. all user  events (namely mouse actions and keystrokes) were logged  by the system. an important aspect of the overall task was  that the windows were sized and positioned to overlap to a  very large degree. thus, the user could not see the relevant  content of any window unless he or she actively switched  to that window by clicking on it; this constraint was  necessary to ensure that the system could log switches  between tasks, including switches to the chat window to  read a chat message, and switches between the mail and  browser windows.  procedure  after being introduced to both tasks, participants performed  trials of the mail task and were occasionally interrupted by  a chat prompt message. each trial of the mail task involved  responding to a single mail message, including lookup of  the product price, sending the response email, and moving  the original mail to the archive folder. during each trial, a  chat prompt was generated at a pseudo-random point in the  trial: the system tracked the user’s events during the trial  and, after one of eight different events, triggered a chat  prompt 50-200 ms after the event—to avoid tying the  prompt directly to the event but also to make it unlikely  that the user could generate another event before the  prompt. the experiment concluded when participants  answered chat prompts for all 50 films.  participants  a total of 20 users (7 female and 13 male) participated in  the study. one (female) participant exhibited a radically  different behavioral pattern than the other participants and  was excluded in the data aggregation below.  results  we first analyzed behaviors in the mail task alone to  understand the sequences of events by which users  performed the task. after informal analysis of the recorded  protocols, we performed an analysis of the transitions  between all events. the main sequence shown as the upper  sequence in figure 2 was found to be the dominant  behavior (roughly 80% of mail trials). users also exhibited  two common alternate strategies: clicking “reply”  immediately after reading an email to begin blank response  email before browsing for product information (labeled a1  in the figure), and resetting the browser to the home page  after sending the response email rather than before  browsing (a2).  using the events found in the sequence analysis, we  computed the number of times users switched to the chat  task after each mail event. the results are shown in figure  3, using the same event coloring as figure 2—events  shown in white indicate points of lower mental workload,  whereas those in gray indicate points of higher mental  workload. as is evident in the figure, users exhibited a  strong tendency to switch tasks at points of lower workload  (white events). for example, the most task switches  occurred after the final event of a trial (mail archive), and  the second-most after selection of the next email (mail  select); at both points, the user did not need to remember  problem state for the next step. the last four columns show  that users also tended to switch tasks after the response  email had been sent, again all points during which no  information needed to be remembered. in the middle of the  trial, the largest number of task switches occurred after the  browser-link2 event: after clicking this second link, the  price information was easily readable on the browser    figure 3: number of switches to the chat task after a given mail-task event. note that the vast majority of  task switches occurred when problem-state information did not need to be maintained (shown in white).        0! 100! 200! 300! 400! 500! 600! 700! mail! select! mail! reply*! browser! focus! browser! home! browser! link1! browser! link2! mail! reply! message! focus*! message! type! message! send! browser! focus*! browser! home*! mail! archive! ta sk  s w itc he s! chi 2010: multitasking april 10–15, 2010, atlanta, ga, usa 87


screen, and thus again no problem state was maintained for  the next event.  we can summarize these results by aggregating the number  of task switches for each type of event: despite the fact that  the prompts occurred roughly equally for points of higher  and lower workload (52% vs. 48% respectively), 94% of all  user task switches occurred at points of lower workload  versus only 6% at points of higher workload. thus, users  showed a strong tendency to postpone the actual processing  of the interruption (i.e., reading and responding to the chat  message) until points of lower mental workload during  which no problem state needed to be maintained.  discussion  our experimental results indicate that when users have the  option to defer an interrupting task, they have a strong  tendency to monotask until primary-task mental workload  has been minimized. this builds on the results of recent  studies [6, 13, 16, 21] by closely controlling workload as the  carry-over of specific pieces of information from one task  step to the next, allowing for a more detailed analysis of the  points of task switching. in an alternate view to automated  systems that monitor task workload and deliver notifications  when workload is low [8, 10, 11], this result suggests that  users themselves can capably handle incoming alerts and  defer processing of interruptions until points of lower  workload. we would suspect (though further research would  need to confirm) that this ability also generalizes to user self- interruptions and discretionary multitasking [14].  our experiment also helps to clarify one source of mental  workload, namely the problem state—temporary information  needed for task processing. the maintenance of problem- state information, such as the product name needed while  browsing, serves as an important form of workload that can  also be associated with a central bottleneck in multitasking  behavior [4, 18, 19]. this internal cognitive workload is  likely also correlated with external, observable indicators of  mental workload (e.g., pupil dilation [3]). certainly the  required information for this experiment—a single product  or price—is a rather simple example of problem state; more  complex tasks, such as writing a research paper, may involve  large-scale conceptual problem states needed to reason about  a particular domain (roughly speaking, the information  needed for a single working sphere [15]). future experiments  along these lines could further evaluate user monotasking for  such complex tasks, potentially involving both longer-term  monotasking and occasional forgetting of deferred tasks [7].  acknowledgments  this work was funded by onr grant #n00014-09-1-0096.  references  1. adamczyk, p. d., & bailey, b. p. (2004). if not now, when?  the effects of interruptions at different moments within task  execution. proc. chi 2004, 271-278.   2. anderson, j. r. (2007). how can the human mind occur in the  physical universe? new york: oxford university press.  3. bailey, b. p., & iqbal, s. t. (2008). understanding changes in  mental workload during execution of goal-directed tasks and  its application for interruption management. tochi, 14, 1-28.  4. borst, j. p., & taatgen, n. a. (2007). the costs of multitasking  in threaded cognition. proc. iccm 2007, 133-138.  5. cutrell, e. b., czerwinski, m., & horvitz, e. (2000). effects of  instant messaging interruptions on computing tasks. proc. chi  2000 extended abstracts, 99-100.  6. czerwinski, m., cutrell, e., & horvitz, e. (2000). instant  messaging: effects of relevance and timing. proc. hci 2000,  71-76.  7. dismukes, r. k., & nowinski, j. (2007). prospective memory,  concurrent task management, and pilot error. in attention:  from theory to practice. new york: oxford.  8. fogarty, j., hudson, s. e., & lai, j. (2004). examining the  robustness of sensor-based statistical models of human  interruptibility. proc. chi 2004, 207-214.   9. gonzalez, v. m., & mark, g. (2004). “constant, constant,  multi-tasking craziness”: managing multiple working spheres.  proc. chi 2004, 113-120.   10. horvitz, e., cadie, c., paek, t., & hovel, d. (2003). models  of attention in computing and communication: from principles  to applications. communications of the acm, 46, 52-59.  11. hudson, s. e., et al. (2003). predicting human interruptibility  with sensors: a wizard of oz feasibility study. proc. chi  2003, 257-264.   12. iqbal, s.t., & bailey, b.p. (2005). investigating the  effectiveness of mental workload as a predictor of opportune  moments for interruption. proc. chi 2005, 1489-1492.   13. iqbal, s. t., & horvitz, e. (2007). disruption and recovery of  computing tasks: field study, analysis and directions. proc.  chi 2007, 677-686.   14. jin, j., & dabbish, l. a. (2009). self-interruption on the  computer: a typology of discretionary task interleaving. proc.  chi 2009, 1799-1808.  15. mark, g., gonzalez, v. m., & harris, j. (2005). no task left  behind? examining the nature of fragmented work. proc. chi  2005, 321-330.   16. mcfarlane, d. c. (2002). comparison of four primary methods  for coordinating the interruption of people in human–computer  interaction. human-computer interaction, 17, 63-139.  17. monk, c. a., trafton, j. g., & boehm-davis, d. a. (2008).  the effect of interruption duration and demand on resuming  suspended goals. journal of experimental psychology:  applied, 14, 299-313.  18. salvucci, d. d., & taatgen, n. a. (2010). the multitasking  mind. new york: oxford university press.  19. salvucci, d. d., taatgen, n. a., & borst, j. p. (2009). toward  a unified theory of the multitasking continuum: from  concurrent performance to task switching, interruption, and  resumption. proc. chi 2009, 1819-1828.  20. trafton, j. g., et al. (2003). preparing to resume an interrupted  task: effects of prospective goal encoding and retrospective  rehearsal. ijhcs, 58, 583-603.  21. wiberg, m., & whittaker, s. (2005). managing availability:  supporting lightweight negotiations to handle interruptions.  acm tochi, 12, 356-387.  chi 2010: multitasking april 10–15, 2010, atlanta, ga, usa 88
