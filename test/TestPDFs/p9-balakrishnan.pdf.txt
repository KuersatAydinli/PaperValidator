

the padmouse: facilitating selection and spatial  positioning for the non-dominant hand  ravin baiakrishnanlj and pranay patei  ‘dept. of computer science  university of toronto  toronto, ontario  canada m5s 3g4  ravin@dgp.toronto.edu  aestract  a new input device called the padmouse is described and  evaluated the padmouse consists of a two degree-of-free-  dom touchpad mounted on a regular mouse base. like the  regular mouse, the padmouse allows for spatial positioning  task to be performed by moving the device on a planar sur-  face. in addition, when coupled with an interaction tech-  nique we call marking keys, users can use the touchpad to  activate modifiers and commands. an experiment shows  that up to 32 modifiers/commands can be quickly and accu-  rately activated using this technique, making it a viable  device for the non-dominant hand in two-handed user inter-  faces. other uses for the padmouse and design alternatives  are also discussed.  input devices, marking-menus, biianual input, touchpad,  mouse, interaction techniques, gestures, hot-keys, toolglass.  introduction  several user interface researchers over the past decade, hav-  ing recognized that in the physical world people often use  both hands to cooperatively perform many tasks, have  explored the possibility of using both hands simultaneously  in the computer interface. in an early study, buxton and  myers 133 showed that in a compound task, a one-handed  interface (i.e. the status-quo) was inferior to a two-handed  interface which split the compound task into subtasks that  could be performed in parallel by both hands. kabbash,  buxton, and sellen [lo] came to a similar conclusion, how-  ever, they also showed that two hands could be worse than  one if an inappropriate interaction technique is employed,  particularly when cognitive load is increased.  building partly on this empirical work, bier et al. [l, 21  developed the click-through toolglass and magic lenses  interface which utilized both hands for its operation. more  recently, kurtenbach et al. [13] described an interface called  ‘t3” which effectively inte--ted the toolglass and magic  ci% 98 los anseles ca usa  copyi& 199s 0-s9791-975-0/9s/4..$5.00  2aliaslwavefront  210 king street east  toronto, ontario  canada m5a 1 j7  { ravin i ppatel} @aw.sgi.com  lenses concepts with other two-handed techniques for per-  forming direct manipulation operations in a 2d drawing  program. zeleznik, forsberg, and strauss [is] incorporated  and extended some of these techniques into their “sketch”  3d modeling system, demonstrating the use of two cursors  controlled by two hands to enhance 3d interaction.  while the existing body of research has investigated a vari-  ety of two-handed interaction techniques, the issue of what  constitutes an appropriate input device for the non-domi-  nant hand remains unexplored. furthermore, these systems  have limited the non-dominant hand to coarse positioning  tasks, relying on the dominant hand for almost everything  else including selection of tools, commands, and modes.  in this paper, we first explore the various tasks that could (or  should) be performed using the non-dominant hand within a  hvo-handed user-interface. we then describe a new device,  the padmouse (figure l), coupled with an interaction tech-  nique called marking keys. together, these enhance the  role of the non-dominant hand by allowing it to activate  modifiers and commands in addition to performing spatial  positioning. finally, we present the results of an experiment  to investigate the performance of marking keys on the pad-  mouse.  7---- 1  --.  figure i. the padmouse 


tvvo-handed interaction  much recent work in two-handed user interfaces [l, 2,5,7,  10, 13, 151 has been guided by the theoretical work of  guiard [6]. in his kinematic chain model of skilled biman-  ual action, the two hands are thought to be two abstract  motors assembled in a serial linkage, thus forming a cooper-  ative kinematic chain. three general principles emerge from  this model:  1. dominant-to-non-dominant spatial reference: the non-  dominant hand sets the frame of reference relative to which  the dominant hand performs its motions.  2. asymmetric scales ofmotion: the two hands operate in  asymmetric spatial-temporal scales of motion. for instance,  when writing on a piece of paper, the motion of the non-  dominant hand controlling the position of the paper is of  lower temporal and spatial tiequency than the writing  movements of the dominant hand which nonetheless  depends on the non-dominant hand’s movement for spatial  reference.  3. precedence of the non-dominant hand: contribution of  the nondominant hand to a cooperative bimanual task starts  earlier than the dominant hand. in the handwriting example,  the dominant hand starts writing after the paper has been  oriented and positioned by the non-dominant hand.  the two-handed interfaces developed to date have by and  large adhered to these principles, although perhaps not  exploiting them to maximum advantage. in the toolglass  and magic lenses interface [l, 23 the non-dominant hand  controls the spatial position of the toolglass sheet, setting  up a context for the dominant hand which performs precise  positioning and drawing tasks in their 2d drawing applica-  tion. in their “t3” concept application, kurtenbach et al.  [i31 use the non-dominant hand for a greater variety of  tasks: positioning and orienting the artwork, positioning a  toolglass, and cooperating with the dominant hand to scale,  orient, and position graphical objects. zeieznik et al. [15]  rely on the non-dominant hand cooperating with the domi-  nant hand to translate and rotate 3d objects, control the vir-  tual camera, and perform a variety of other editing tasks.  i’ve got two hands, but lost my hot-keys!  a characteristic feature of today’s ubiquitous wimp (win-  dows, icons, menus, and pointer) user interface is the use of  the non-dominant hand to activate commands and modifiers  using the keyboard (sometimes referred to as ‘hot-keys’ or  ‘keyboard shortcuts’) while the dominant hand operates the  mouse. we use the term “commands” to mean operations  that are performed once when a key or combination of keys  is pressed (e.g., control-c for copy, control-v for paste in  many applications); and “modifiers” to mean operations that  put the application into a particular mode only for the dura-  tion of the keypress (e.g., on a mac, holding down the shift  key allows for multiple selections to be made with the  pointer. releasing the key returns the system to its default  single selection mode).  in high-end 2d and 3d graphics applications, there are in  the order of five hundred available commands and modifi-  ers: the most frequently used ones are usually rapidly acces-  sible via hot-keys. ironically, the speed and functionality of  this albeit liited form of two-handed interaction has not  been incorporated in the more recent two-handed interfaces  discussed in the previous sections, for example, the tool-  giass and magic lenses interface [l, 21 uses the non-domi-  nant hand only to control the spatial position of the  toolglass sheet via a trackball or touchpad, while the domi-  nant hand selected tools from this sheet. also, the contents  of the sheet were selected from a master sheet using the  dominant hand. similarly, kurtenbach et al.‘s “t3” applica-  tion [13] relied on the dominant hand to select the contents  of the toolglass via a marking menu [ll]. thus, the domi-  nant hand is required to serially select the tool and then per-  form the operation with the tool. the non-dominant hand  merely keeps the tools within easy reach of the dominant  hand. we believe that a system in which the non-dominant  hand selects the tool or mode which is then used by the  dominant hand would be more in line with guiard’s kine-  matic chain model [6] where the actions of the non-domi-  nant hand naturally precedes and sets the stage for the  actions of the dominant hand. one way to achieve this while  retaining the favourable aspects of the toolglass and t3  style two-handed interfaces would be to provide the non-  dominant hand with an input device that allowed for rapid  activation of commands and modifiers in addition to per-  forming spatial positioning.  the padmouse  the padmouse (figure 1) is a new input device that inte-  grates a two degree-of-freedom touchpad with the ubiqui-  tous two degree-of-freedom mouse. this allows for the  input of gestures by the user’s middle or index finger on the  touchpad, while the user’s hand controls the 2d spatial posi-  tion of the device on the work surface (like a regular  mouse).  in our prototype implementation, we mounted a synaptics  t1002d touchpad on a generic se&ups2 mouse base. two  serial ports (or one serial port and one ps2 mouse port) are  required to interface it to a host computer. this is sufficient  for evaluating our design and interaction techniques. a  product would require the integration of the mouse and  touchpad firmware.  while the padmouse can foreseably be incorporated into a  variety of user interface techniques, in this paper we focus  on its use as an enhanced device for the non-dominant hand.  in addition to using the padmouse for spatial positioning in  toolglass and t3 style interfaces, the touchpad on the pad-  mouse can be used to activate commands and modifiers  using a technique we call marking keys.  marking keys  marking keys is an adaptation of marking menus [ill: a  mark based interaction technique that allows a user to select  items from a menu which may be single level or hierarchi-  cal. as kurtenbach [ll] describes, selections using marking  menus can be made in two ways (figure 2):  1. menu mode: the user enters this mode by pressing a but-  ton on a stylus or mouse and pausing for a short time (less  than 1 second). a radial menu then appears on the display,  10 


chl 98 l 18-23 april 1998 papers  e=-  menuhlode mark mode  figure 2a selecting from a single level marking menu in menu  made, the menu l dirpkzyed and the user moves to the desired  item. users who are famiriar with the menu iayout select items in  mark mode where no menu is displayed  hlenu hlode mark mode  figure 2b. selecting from a hierarchical marking menu. tllefirsr  segment of the mark selects a submenu and the second segment  selects the desired menu item. in menu mo& the current  (sub)menu is displayed and the user moves to the desired item.  users who are familiar with the menu layout select items in mark  made by making a compoundmark  centered around the cursor position. the user selects a menu  item by moving the cursor into the desired sector of the  radial menu, the selected item is highlighted, and selection  confirmed when the mouse/stylus button is released.  2. mark mode. the user enters this mode by pressing a but-  ton on a stylus or mouse and immediafely moving the cursor  in the direction of the desired menu item. instead of display-  ing the radial menu, the system displays an ink-trail follow-  ing the cursor. when de button is released, the menu item  that corresponds to the direction of movement is selected. if  the user stops moving but does not release the button, the  system assumes that the user is unsure of the menu layout  and displays the menu, effectively providing guidance by  self-revelation only when required. studies have shown that  making selections in mark mode can be 3.5 times faster than  when the menu is displayed [ 111.  the beauty of marking menus is that a user who is unfamil-  iar with the menu layout only has to wait a split second  before the menu is displayed. the mark made to select an  item from this menu is similar to the mark required to make  a selection when in mark mode. each time a user makes a  selection in menu mode, they are rehearsing the mark that  would be required when in mark mode. this helps the user  learn the markings. once the user is familiar with the menu  layout, selection is achieved very quickly by simply making  a mark without waiting for the menu to be displayed. thus,  marking menus effectively utilizes self-revelation, guid-  ance, and rehearsal to aid the user in making a smooth tran-  sition from novice to expert behaviour.  our marking keys interaction technique, whose behaviour  is illustrated in figure 3, retains the favourable characteris-  tics of marking menus while introducing several changes  which result in a gesture based alternative to hot-keys:  instead of using a stylus or mouse to drive a cursor which  then makes the required mark, users simply use their  index finger to create the mark on the padmouse’s touch-  pad.  no button presses are required. rather, the menuing sys-  tem is activated when the user’s finger first touches the  touchpad. if the user pauses for 0.4 seconds, a radial  menu of options is displayed and the system is in menu  mode. if the user starts moving immediately after touch-  ing the pad, the system is in mark mode and no menu is  displayed.  recognition of the mark is achieved by pausing for 0.2  seconds after the mark is made. if a valid mark results in  the selection of a command, that command is performed  and the system returns to an idle state. if the mark results  in the selection of a modifier, that modifier is activated  and remains active as long as the finger remains on the  touchpad. when the finger is lifted off the pad, the modi-  i  figure 3. state transition diagram illustrating the behaviour of marking keys on the padmouse. in menu mode the menu is displayed; in  mark mode only the ink-trail of the mark is displayed once in the “recognize mark” state, no menu or marks are displayed. i-  ll 


papers chi 98 . 18-23 april 1998  fier is inactivated and the system returns to its default  mode. this is where marking keys differs from tradi-  tional marking menus: in marking menus there is no  mechanism for activating modifiers; only commands can  be selected. thus, marking keys mimic the action of hot-  keys, using gestures to select a command or modifier  from a menu instead of pressing a key on a keyboard.  wrth hot-keys, there is no built-in mechanism for revealing  the assignment of keys to functions. users have to rely on  on-line help pages or other documentation to discover the  key mappings. this can be frustrating, particularly for nov-  ice users. users of the padmouse with marking keys get all  the functionality of hot-keys with the added benefit of self-  revelation, as well as a built-in spatial positioning device.  also, the actions required of the user when activating mark-  ing keys are conceptually and physically distinct from the  actions required to control the spatial position of the pad-  mouse. as jacob et al. [9] have shown, tasks which are con-  ceptually independent benefit from input devices that allow  the tasks to be performed separately. users of the padmouse  and marking keys should likewise benefit from the separa-  tion of the two tasks it is designed to perform.  our implementation of marking keys on the padmouse  allows users to activate commands and modifiers using sim-  ple marks (i.e., using a single level menu - figure 2a) as  well as compound marks (i.e., using a two level hierarchical  menu - figure 2b). a question of interest, therefore, is the  bounds on how many items can be in each level, before the  use of a mark for item selection becomes too slow or error  prone. kurtenbach and buxton [12] explored this question  in the context of using a stylus or mouse to select from a  marking menu. they found that users could select from  menus with up to two levels and eight items per level with  an error rate under 10%. with menus more than two levels  deep and greater than eight items, selection became error  prone. other research [s] also indicates that menus with up  to eight items result in acceptable performance. unfortu-  nately, since marking keys on the padmouse relies on the  index finger for performing the marks rather than a mouse  or stylus, this previous body of research can only serve as a  guideline to us. the range and type of movement afforded  by the index finger is very different from that afforded by  the whole hand. thus, it is possible that the optimal number  of items that can be selected using our technique will differ  from that selectable using a monse or stylus. furthermore, it  is also likely that the finger will find marks in some direc-  tions easier to perform than others. in order to explore these  issues, we conducted an experiment.  this is the first of a series of planned experiments with this  device and interaction technique. at this early stage, we are  mainly concerned with how users perform using marking  keys on the padmouse. we are therefore evaluating this  technique without including the spatial positioning capabili-  ties of the padmouse. issues concerning the ability to use  marking keys while performing spatial positioning tasks is  left to be formally evaluated at a later date; however, a dis-  cussion and informal observations are presented later in this  paper.  experiment  goal  we had hvo primary goals for this experiment. firstly, we  wanted to determine the differences in performance when  selecting using marking keys as the number of items and  levels are increased. secondly, we were interested in the  issue of whether marks in certain directions are easier to  perform than others.  in order to determine the iimits of performance, we needed  to measure expert behaviour. lie kurtenbach and buxton  [12], we defined expert behaviour to occur when the user is  completely familiar with the layout of the menu and knew  the exact mark required to select a particular item. research  on marking menus [ll, 121 has shown that users eventually  reach this level of expertise, selecting using marks alone  (i.e., without displaying the menu) over 90% of the time.  the cognitive aspects of this previous work is directly  applicable to our technique. where our technique differs is  in the motor skills required to perform the mark, and this is  what we sought to measure.  method  subjects  12 right-handed volunteers participated as subjects in the  experiment. all used their non-dominant hand to perform  the experiment.  apparatus  the experiment was conducted on a silicon graphics indy  workstation with a 19 inch colour display. the padmouse  was used as the input device. the mark recognition software  was identical to that of a commercial implementation of  marking menus and has been extensively tested in both  experimental and real world settings. the workstation ran in  singie-user mode, disconnected from all network traffic.  subjects were seated approximately 60 cm in front of the  display with their non-dominant hand manipulating the pad-  mouse with the index finger used to activate marking keys  on the padmouse’s touchpad. as discussed earlier, the spa-  tial positioning feature of the padmouse was not used in this  experiment.  task and stimuli  in this experiment we simuiate the situation where subjects  are completely familiar with the marks they need to make  for a selection. we achieve this by displaying the desired  mark on the screen and asking the subject to make a similar  mark using the touchpad on the padmouse. since the user is  told a priori what the desired mark should be, the cognitive  effort required of the user is minimal and constant from trial  to trial, allowing us to measure motor performance.  a trial occurred as follows. the stimulus mark was dis-  played on screen (figure 4a). using their index finger on the  padmouse’s touchpad, the subject attempted to make a sim-  ilar mark. the moment the subject’s finger made contact  with the touchpad, the stimulus mark was removed from the  screen and an ink-trail of the mark the subject was making  was displayed instead. at no time was the menu displayed.  identical to our implementation of marking keys (figure  3), the mark was recognized and the trial ended when the  12 


figure 4. stimulus and response for one experimental condition.  {a) slwws the desired mark presented to the subject at the start of  a trial (b) shows the subject’s mark overlaid on the desired mark  on completion of the t&l  subject’s finger was stationary on the touchpad for 0.2 sec-  onds. once the mark was recognized, the stimulus mark was  displayed overlaid with the ink-trail of the mark the subject  made (figure 4b). this served to reinforce learning and aid  in correcting errors for future trials. if the subject’s mark did  not result in the same command or modifier selection as the  stimulus mark, the system would beep to indicate an error.  design  guided by the results of previous work is, 11,121 as well as  our informal use of the device and technique, we decided to  limit our study to menus up to two levels deep and up to  eight items per level as we felt that this would be the upper  limit beyond which performance would definitely degrade.  we chose three menu layouts (figure 5):  i level, 8 items: this was de simplest layout studied. the  eight items are laid out in a circle, each occupying a 45  degree sector. only simple straight marks are required to  select from this menu.  2 levels, 16 items: four possible first level marks lead to a  second level menu which in turn has four items, resulting in  4x4=16 items in total. all the required marks are aligned to  the horizontal or vertical axes (often referred to as on-axis  layout). compound marks are required for selection.  2 zerels, 64 items: eight possible first level marks lead to a  second level menu which in turn has eight items, resulting  in sxs=64 items in total. compound marks are required for  selection. both on-axis and off-axis marks are required.  this layout exhausts all possible combinations for menus up  to two levels deep and up to eight items per level. the sim-  pler layouts above were included because they allow for  higher spatial variability in the required marks.  a within subjects completely counterbalanced repeated  measures design was used all subjects performed the  experiment using all three menu layouts. the presentation  order of the three layouts was completely counterbalanced  across the subjects. for each menu layout, subjects per-  formed 10 blocks of trials. each block consisted of 1 trial  for each of the possible marks for that menu layout, pre-  sented in random order within the block subjects were told  in advance the menu layout for the upcoming 10 blocks and  were also given several practise trials to familiarize them-  selves with the task, they were allowed breaks after every  7\o/ .l  0  )\  2  3  4  figure 5(a). i level, 8 item layout  o-o  i o-6-,-0-2  o-4'  6-o 2-o  i  2q-2-2  2-4  ‘40  i 46--42  45  figure s(b). 2 level, 16 item layout. the first segment of the  mark selects the submenu and the second segment selects the  item from that submenu. a’11 the marks are aligned to the hori-  zontal or vertical axes [on-axis layout).  o-7 o-o o-1  o-  %  -0-2  o- 0-4 o-3  *  jj+\/  7 ol  --0 2 -  0  %  5  *  x  * -  figure s(c). 2 level, 64 item layout. the first segment of the  mark selects the submenu and the second segment selects the  item from that submenu. both on-axis and off-axis marks are  included. to avoid cluttel; we have only labeled one submenu  the others are iabeled in a similarfashion: first segment num-  berfollowed by second segment number 


papers chi 98’. 18-23 april 1998  eight trials. after the completion of one trial within this  group of eight, the next trial began after a 0.5 second pause.  the experiment consisted of 10560 total trials, computed as  follows:  12 subjects x  3 menu layouts consisting of 8+16+64==88 different marks x  10 blocks of trials for each layout x  1 trial per mark per block  = 10560 total trials.  the experiment was conducted in one sitting and lasted  about an hour per subject.  results and discussion  figure 6 compares subjects’ mean task completion time and  error rates for the three menu layouts. task completion time  was measured beginning when the subject’s finger first  touched the touchpad and ending when the mark was recog-  nized by the system. this effectively discounted the time  taken to react to the stimulus, measuring only the cost of the  motor component. repeated measures analysis of variance  showed that the number of items and levels in the menu had  a significant effect on both task completion time  (f2,t1 = 110.91, p < .oool) and error rate (fztl =47.75,  p < .oool).  21evelq64iteya  (410 ms, 32.8 0) 6  100 200 300 400 500 600  task completion tie (ms)  figure 6. comparison of the three menu layouts for envr rates  and movement ime. data from all 12 subjects and all trials.  from figure 6, we see that the 2 level, 64 item menu had  considerably higher error rates than the other two layouts.  however, task completion time was not as drastically  affected although the difference was statistically significant.  one possible cause of the drastic increase in errors could be  that mark in some directions are particularly hard to per-  form and data from these trials is skewing our results. we  therefore took a closer look at the performance differences  between the various marks.  for the 1 level, 8 item layout, analysis of variance showed  that the mark direction had a significant effect on error rates  (f7,77 = 2.08, p < .05). a ryan-einot-gabriel-welsch p‘os-  thoc test revealed that the mark for item 7 (refer to figure  5a) was significantly harder to perform than the other  marks.  for the 2 level, 16 item layout, analysis of variance again  showed a significant effect for mark direction  (f~~,jgs = 3.31, p c .oool). as expected, the easiest items  were the four where both segments of the compound mark  were in the same direction (items o-o, 2-2, 4-4, and 6-6 in  figure 5b). the most error prone marks were those whose  tit segment was a left or right mark followed by a second  segment that was an up or down mark (items 2-0,2-4,6-o,  64 in figure 5b).  for the 2 level, 64 item layout, the situation gets more com-  plex. like the 2 level, 16 item layout, the marks where both  segments of the compound mark were in the same direction  (items o-o, l-l, 2-2,3-3,4-4,5-5,6-6,7-7 in figure 5c) per-  formed best, with error rates under 10%. previous research  on marking menus with large numbers of items and levels  [12] have found that when the mark segments are confined  to the horizontal or vertical axes (on-axis marks), perfor-  mance is better than for off-axis marks. an analysis of vari-  ance on our data grouped according to whether the mark  segments were on-axis or off-axis showed a significant  effect for axis @ < .05). marks where both segments were  on-axis performed best, followed by those where both seg-  ments were off-axis. when one segment was off-axis and  the other segment on-axis, performance degraded. a possi-  ble explanation is that these “on-off” and “off-on” axis  marks account for all the cases with the smallest angle  between the two segments of the mark (i.e., a 45 degree  turn) which are generally difficult marks to make accurately.  if we consider only the 32 marks where both segments were  either on-axis or off-axis, the error rate goes down to under  20%.  what constitutes an acceptable error rate for tasks like this?  as kurtenbach & buxton [12] point out, “the answer  depends on the consequences of an error, the cost of undo-  ing an error or redoing the command, and the attitude of the  user.” like marking menus, marking keys present us with  the typical trade-off between speed and accuracy. a  redeeming feature of marking keys is that if the error rate  when in mark mode is too high, users can always resort to  the slower but more accurate fallback technique of display-  ing the menu and making a selection.  comparing our results to the prior art, we find that marking  keys fares well. kurtenbach [ll] reports that users with 10  to 30 hours of practice are able to select from a six-item  marking menu using a mouse at a rate between 200 and 400  ms. nilsen [14] reports that a selection from a six-item lin-  ear menu using a mouse required on average 790 ms. card,  moran, & newell’s [4] keystroke-level model indicates  that a “good typist” takes 120 ms to execute a key-press on  a keyboard, and 400 nis to home in on the desired key. this  results in an approximate figure of 520 ms for selection  using keyboard hot-keys. our subjects, with only an hour of  14 


-*>- _._ _ --..-_.  chl 98 * 18-23 april 1998  practice, averaged 370 ms for an eight-item menu.  this experiment has demonstrated that users of marking  keys can quickly activate up to 32 commands and modifiers  with an error rate of under 20%- this is probably more than  the number of hot-keys required in a typical application. if  we restrict ourselves to single level menus with a small  number of items, much better performance (speed faster  than hot-keys, and errors under s%) is possible.  as mentioned earlier, this is the first of a series of planned  experiments to evaluate this device and interaction tech-  nique. at this stage, we sought to determine the limits of  user performance with marking keys and did not confound  the issue by utilizing the spatial positioning capabilities of  the padmouse. an obvious question, therefore, is the extent  to which spatial positioning of the mouse interferes with the  ability to make correct marks on the touchpad and vice  versa. informal observations of users of the device in proto-  type applications (see section below) do not show evidence  of interference between the finger movements on the touc-  pad and wristlarm movements controlling the mouse.  indeed, experienced users (including the authors of this  paper) are able to activate modifiers and commands with  marking keys while simultaneously using the spatial posi-  tioning capabilities of the device. while it appears that  interference behveen the hvo parts of the device is minimal,  a formal experimental evaluation is required for confirma-  tion and this will be conducted in the nearfuture.  applications  we have prototyped the use of the padmouse with marking  keys within one of aliaslwavefi-ant’s new 3d modelinglani-  mation applications, maya. we use the spatial positioning  capability of the padmouse to control the virtual camera in  the non-dominant hand (zeleznik et al. [15] describe similar  use of a non-dominant hand input device) while marking  keys is used to activate frequently used commands (e.g.  “undo”, “redo last command”, “copy”), and modifiers (e.g.,  activation of graphical manipulator widgets for object trans-  lation, rotation, scaling, etc.). the dominant hand uses a  regular mouse to perform operations in the 3d scene using  those graphical manipulator widgets. in the default uniman-  ual interface, the dominant hand has to constantly switch  behveen camera manipulation and object manipulation. our  bimanual interface has the advantage of having the non-  dominant hand control the camera so that users can now  tumble/track/dolly around the 3d scene to get the best view  of their work while changing parts of the scene with their  dominant hand. preliinary feedback from those who have  tried this implementation is encouraging.  we have also incorporated the padmouse and marking  keys in a prototype 2d drawing application with a tool-  glass and magic lenses interface similar to the ‘t3” con-  cept application of kurtenbach et al. [13]. here, the spatial  positioning capability of the padmouse replaces the digitiz-  ing tablet puck used in the ‘t3” application, while marking  keys are used to select the contents of the toolglass sheet  (the previous implementation [13] uses the dominant hand  to make this selection using a marking menu).  future directions  in this paper, we have focused on the use of the padmouse  as a non-dominant hand device in a two-handed user inter-  face. clearly, this is not the only application for this device.  other possible uses include using the touchpad to perform  scrolling and other tasks. zhai, smith, and selker [15]  recently performed a comparison of various input devices in  scrolling tasks. it would be interesting to see how the pad-  mouse fares in such a comparison.  we are also exploring alternative designs to the padmouse  for providing command/modifier selection and spatial posi-  tioning in an integrated device. one design we have proto-  typed (figure 7) is a mouse with 10 keys in an arrangement  designed to facilitate comfortable key activation without  much finger movement. this design is an evolution of the  obvious solution of placing a keypad on the back of the  mouse - a design where it is impossible to move the mouse  spatially while pressing buttons on the keypad. preliminary  use of our prototype indicates that some users find it diffi-  cult to activate buttons with the fourth and fifth fingers, but  this could perhaps be overcome with improved button  designs. performance differences between this device and  the padmouse with marking keys will have to be evaluated.  figure 7. protogpe ten-key mouse.  conclusions  we have presented a new input device, the padmouse, and  an associated interaction technique called marking keys.  this allows users to perform both spatial positioning tasks  as well as activate commands and modifier using the non-  dominant hand. our experiment showed that subjects were  able to effectively activate up to 32 commands/modifiers  using this device and interaction technique. we believe that  incorporating a device like this in two-handed interfaces can  lead to more facile and efficient human-computer interac-  tion.  15 


papers chi 98 l 18-23 april 1998  acknowledgments  we thank thomas baudel, bill buxton, george fitzmau-  rice, gordon kurtenbach, scott mackenzie, and russell  owen for valuable discussions and assistance during the  course of this work. we’d also like to thank the other mem-  bers of the input research group at the university of tor-  onto and all the volunteers who participated in our  experiment. the support of aliashvavefiont is gratefully  acknowledged.  references  111  pi  r31  [41  pi  wi  [71  bier, e. a., stone, m. c., pier, k., buxton, w., &  derose, t.d. (1993). toolglass and magic lenses: the  see-through interface. computer graphics proceed-  ings, annual conference series, 73-80, new york:  acm siggraph.  bier, e. a., stone, m. c., fishkin, k., buxton, w., &  baudel, t. (1994). a taxonomy of see-through tools.  proceedings of the chi’94 conference on human  factors in computing systems, 358-364, new york:  acm.  buxton, w., & myers, b. a. (1986). a study in tvro-  handed input. proceedings of the chz’86 conference  in human factors in computing systems, 321-326,  new york: acm.  card, s. k., moran, tp., & newell, a. (1980). the  keystroke-level model for user performance time  with interactive systems. communications of the  acm, 23, 7,396-410, new york: acm.  fitzmaurice, g. w., & buxton, w. (1997). an empiri-  cal evaluation of graspable user interfaces: towards  specialized, space-multiplexed input. proceedings of  chi’97 cotlference on human factors in computing  systems, 43-50, new york: acm.  guiard, y. (1987). asymmetric division of labour in  human skilled bimanual action: the kinematic chain  as a model. journal of motor behavioul; 19,486-x7.  hinckley, k., pausch, r., proffitt, d., patten, j., &  kassell, n. (1997). cooperative bimanual action.  proceedings of the chi’97 conference on human  factors in computing systems, 27-34, new york:  acm.  pi  pi  wi  1111  wi  [i31  u41  [151  wi  hopkins, d. (1991). the design and implementation of  pie menus. dn dobbs’ journal, december 1991, 16-  26.  jacob, r. j. k., sibert, l. e., mcfarlane, d. c., &  mullen, m. p. (1994). integrality and separability of  input devices. acm transactions on computer-  human interaction, 1, 1,3-26.  kabbash, p., buxton, w., & sellen, a. (1994). two-  handed input in a compound task. proceedings of the  chi’94 conference on human factors in computing  systems, 417-423, new york: acm.  kurtenbach, g. (1993). the design and evaluation of  marking menus. ph.d. thesis, department of com-  puter science, university of toronto, toronto, can-  ada.  kurtenbach, g., & buxton, w. (1993). the limits of  expert performance using hierarchical marking menus.  proceedings of znterchz’93 conference on human  factors in computing systems, 482-487, new york:  acm.  kurtenbach, g., fitzmaurice, g., baudel, t., & bux-  ton, w. (1997). the design of a gui paradigm based  on tablets, two-hands, and transparency. proceedings  of the chi’97 conference on human factors in com-  puting systems, 35-42, new york: acm.  nilsen, e. l. (1991). perceptual-motor control in  human-computer interaction. technical report no.  37, cognitive science and machine intelligence labo-  ratory, university of michigan.  zeleznik, r. c., forsberg, a. s., & strauss, p. s.  (1997). two pointer input for 3d interaction. proceed-  ings of 1997 symposium on interactive 30 graphics,  providence, rhode island.  zhai, s., smith, b. a., & selker, t. (1997). improving  browsing performance: a study of four input devices  for scrolling and pointing. proceedings of inter-  act’97: the sixth ifip conference on human-com-  puter interaction, sydney, australia.  16 
