

comparison of two touchpad-based methods   for numeric entry    poika isokoski and mika käki  department of computer and information sciences   fin-33014 university of tampere  finland  poika,mk@mail.cs.uta.fi    abstract  small hand-held touchpads can be used to replace stylus- based digitizing tablets when the use of a stylus is not  convenient. in text entry tasks where the writing surface is  held in a hand the error rate becomes a problem. the small  size of strokes compared to the width of the fingertip and  the additional imprecision caused by the interaction of the  pad and finger movements make input very imprecise. we  describe a new improved clock-face based stroke system for  entering numbers with a touchpad. in a 20-session user  study with 6 users we found slightly better throughput of  successfully entered numbers with the proposed new  system. this advantage was mainly due to lower error rate  with the new system. user preference similarly slightly  favored the new system over an earlier straightforward  proposal based on the clock metaphor.   keywords  clock metaphor, writing, mobile devices, stylus overhead  introduction  a whole family of computing devices has recently sprung  up in the size range between mobile phones and laptop  computers. these devices, known as personal digital  assistants (pdas) are with few exceptions pen-operated  because keyboards would be impractical. the display area  of the device usually reacts to touch by a finger, but a  special stylus is often provided for more accurate pointing.  a pen-based input incurs a certain cost. the user is required  to find the stylus, take it into his or her hand, and put the  stylus back once the session with the pda has ended. with  pdas in the usual calendar, notebook, and messaging  contexts this cost in time and effort has proven to be  tolerable. however, if the task and device at hand are  sufficiently simple such as changing the channel on a tv  set or changing settings on a digital camera or a wristwatch,  the stylus overhead may be too high. furthermore, some  devices are too small to have a good storage place for the  stylus making losing it alarmingly easy. we explore the  possibility to forego the stylus and use the more imprecise  technology of finger touch sensing.   we compare two methods for the entry of numbers using a  handheld touchpad. the first method is a re-implementation  of a system used in an earlier study by mcqueen et al. [17].  it is based on the idea that a character is a stroke on an  imagined clock-face from center towards the desired  number. this system is a straightforward implementation of  the clock-face metaphor and therefore called the pure  clock-face design in this paper. the second method is new  and uses roughly the same principle, except that off-axis  strokes are l-shaped following first the nearest axis and  then turning towards the desired number in the clock-face  (see figure 1). this second system being a mixture of the  pure clock-face design and other systems is hereafter known  as the hybrid design.  previous work in the area suggests that the error rate with  the pure design is disturbingly high. we expect the error  rate to further increase when using a handheld touchpad and  finger instead of a stationary tablet and a stylus. the hybrid  system could be expected to have poorer overall  performance because the more complex l-shaped strokes  may be slower to draw. however, our hypothesis is that the  hybrid stroke system is more robust and therefore has lower  error rate allowing comparable or better overall  performance.  in the remainder of this paper, we explore this hypothesis  by first explaining previous work that inspired us to  experiment with this kind of number entry systems. then  we give details on our prototype design and implementation  followed by a description of an experiment and results  relating to the hypothesis. we finish with conclusions based  on the results of the experiment.  related work  the present work is closely related to two pieces of earlier  research. the first set of related papers describes  experiments with a numeric entry technique based on a  clock metaphor [15, 17]. the second set of closely related  papers is the work on marking menus [12, 13, 14].    permission to make digital or hard copies of all or part of this work for  personal or classroom use is granted without fee provided that copies are  not made or distributed for profit or commercial advantage and that  copies bear this notice and the full citation on the first page. to copy  otherwise, or republish, to post on servers or to redistribute to lists,  requires prior specific permission and/or a fee.  chi 2002, april 20-25, 2002, minneapolis, minnesota, usa.  copyright 2002 acm 1-58113-453-3/02/0004…$5.00.   minneapolis, minnesota, usa • 20-25 april 2002                                                                                                               paper: input devices         volume no. 4, issue no. 1                         25


additionally, the work with touchpad based remote- controllers [8] and various unistroke alphabets [1, 6, 9, 11,  16, 18, 19] is highly relevant to the work at hand.  especially so, when related to the notion of sloppiness  space in the design of unistroke character sets as discussed  by goldberg and richardson [9].  we will now discuss in more detail the two areas of  research that led us to the present work.  marking menus  pie menus are menus that are drawn by dividing a circle  into sectors. selections are accomplished by starting from  the center and moving the pointer over the desired slice and  clicking (or releasing) a button on the pointing device.  because the pointer must be in the center of a pie menu  when the selection begins, pie menus are most conveniently  used as context sensitive menus that pop up wherever the  cursor happens to be. just like the more common linear  menus, pie menus can be nested. when a slice representing  a submenu is selected, the submenu is shown around the  cursor. the chain of menu selections thus continues until it  is interrupted or a leaf node in the menu structure is  reached.  marking menus are special kind of pie menus. in addition  to regular pie menu behavior they allow selections by using  the pointer movements without showing the menu. when  the marking behavior of the menus is used, the pointer is  used to draw the path that would select the desired slice if  the (appropriately scaled) menu were visible. if the pointer  does not move, the menu is shown after short time delay to  make selecting easier for novices.   the usefulness of pie menus in general [5] and marking  menus more specifically [12, 14] is well established by  now. pie and marking menus are faster to use than linear  menus in many graphical user interfaces. the connection to  text entry is easy to draw given that some experiments  aiming to evaluate marking menus have also been  experiments in text entry with a limited character set (for  an example of such an experiment see [13]).  kurtenbach and buxton explored user performance on  marking menus with varying widths and depths [13]. their  results show, among other things, that selection times on a  one-level 12-slice menu are close to those measured on a  two-level 4-slice menu. on the other hand the error rate on  a two-level 4-slice menu is only about half of what was  measured for the one-level 12-slice menu. this is the  critical finding that we try to verify and utilize in the  present work.  menu systems specifically aimed for text entry have also  been proposed. t-cube by venolia and neiberg uses an  initially visible 8-slice circular menu [18]. a touch on one  of the sectors initiates behavior very similar to standard  marking menus: the user may draw the gesture directly, or  wait for a 8-slice sub-menu to appear. in t-cube the  submenu does not appear under the pen but elsewhere to  avoid being obscured by the pen and the hand. other  systems like quikwriting [18] and minimal device  independent text input method (mditim) [11] can also  be seen as derivatives of menu selection techniques or more  generally tree traversal techniques. however, these systems  do not show the menu to the user and for the most of the  time the user's impression is not that he or she is using a  menu.  for the remainder of this paper we will talk about the  strokes used for number entry as if they were handwriting  characters like any other unistroke characters such as the  original unistrokes by goldberg and richardson [8],  graffiti [1], or mditim [11]. however, the alternative  interpretation as menu selection traces would be equally  valid.  number entry  systems capable of general text entry can certainly be used  for entering numbers too. the difficulty of learning the  character set (or number locations in the menu) should be  alleviated to allow good novice performance. a central idea  in marking menus is that the menu provides automatic  context sensitive help that aids in the learning of the  gestures.   for entering numbers, familiarity with the number  arrangement on a clock-face can be used as a memory  shortcut for new characters. mcqueen et al. compared a  system based on the clock metaphor (pie pad) and regular  hand written characters for entering numbers [17]. pie pad  strokes are the same as the “pure” system in figure 1. for  the regular handwriting part they used the microsoft's  handwriting recognizer version 1.0. the regular  handwriting part of their study, however, is not very  interesting in the context of the work at hand. the clock  metaphor part of the study is what we wish to elaborate on.  mcqueen et al. had six students use both systems for 20  sessions, each session lasting 15 minutes per system. they  found that the clock metaphor based system is initially  slightly slower, but with practice soon overtakes regular  handwriting in speed. error rates did not differ  significantly. during the last three sessions the average  error rates were close to 8% for both techniques.   the system that we call the pure clock-face system in this  paper is essentially the same as piepad. the two main  differences between our system and the one used by    figure 1. number arrangement and the stroke sets.  paper: input devices chi  changing the world, changing ourselves       26                         volume no. 4, issue no. 1


mcqueen et al. are related to the differences in the used  pointing technology. first, we use a handheld touchpad  instead of a fixed stylus operated pad. second, the point  where the text is drawn with the finger is dissociated from  the point where the text is entered. in other words we use an  indirect pointing device whereas mcqueen et al. used direct  pointing.  interface design and implementation  method 1: pure clock-face  design  we copied the design of the system used by mcqueen et al.  as closely as we could. a schematic of the character set is  shown in figure 1. although strokes for 10 (space) and 11  (backspace) do exist, they were not used in our experiment.   the strokes were recognized based on the first and last  points belonging to the stroke. only the direction of a  vector drawn from the beginning of a stroke to the end was  used for recognizing the stroke. we chose to ignore the  suggestions for improvement of the method given by  mcqueen et al. because we wanted to be able to directly  compare our results on speed and error rate with their  results.  implementation  as an input device we used a cirque easycat touchpad  shown below in figure 2. the device is intended for  desktop use, but is small enough (69x86x13mm) to be held  in a hand. the touch-sensitive area available for use is  approximately 45x60mm. all of this area is not needed for  this method. an area of about 20x20mm should be enough,  although it should be noted that decreasing the size of the  strokes increases error rate. this happens because the noise  in finger movements begins to interfere with the intended  shape of the stroke. especially the relatively frequent hook- shaped appendices in the beginnings and ends of the strokes  tend to cause problems when overall stroke size is small  enough. in our implementation, we did not limit the area  use in any way.  we needed the touchpad to produce high-resolution  absolute position data with pressure information. therefore,  we opted to use shaun bangay's cirque cat driver for  linux version 0.1.8 [4] as a basis for our own c++ class  that handles the touchpad interface over the serial port.  our interface class spawns a linux thread that reads the  data from the touchpad and maintains a time-stamped event  queue that can be read later without loss of accuracy in the  timing of the events. the test software reads events from  this queue and draws the finger trace in the feedback  window (figure 3). when the end of the stroke is received,  its characteristics are computed and number recognition  takes place. the number is then forwarded to the task  window (seen in figure 4). the whole process is fast to the  extent that the system appears to respond in real time.  possible differences in running times of the recognition  algorithms are in a scale smaller than the refresh interval of  the display (11,8 ms) and are therefore unlikely to  contribute significantly to the results of the experiment.  method 2: hybrid clock-face   design  this method for number entry is our own design. parts of  the system have been described before, but the combination  is new. the main problem that the design tries to solve is  the difficulty in consistently drawing lines that end within  one of the 30 degree slices in the pure clock-face design.  especially the off-axis directions (1, 2, 4, 5, 7, and 8) are  more error prone than is desirable [13, 17]. the solution is  to encode the off-axis directions into sequences of on-axis  strokes. for example, stroke for number 1 is combination of  strokes for 0 and 3. on axis strokes 0, 3, 6, and 9 are  written just like in the pure design (see figure 1). the  important feature of this design is that users can still use the  clock metaphor to remember where the stroke should end.   implementation  the hardware and software used for the hybrid design are  the same as described above for the pure clock-face design  except for the stroke recognizer. our pure clock-face  recognizer would recognize correctly the hybrid strokes  shown in figure 1. however, because it is unlikely that  people will be able to write the curved strokes so that they  end so neatly within the correct slice, we used a different  kind of a recognizer. our recognizer is a slightly simplified    figure 2. cirque easycat touchpad.    figure 3. the feedback window.  minneapolis, minnesota, usa • 20-25 april 2002                                                                                                               paper: input devices         volume no. 4, issue no. 1                         27


c++ rewrite of the recognizer that was used by enns and  mackenzie in their work on touchpad-based remote control  [8].  in essence the recognizer is a very simple greedy exact  matching feature extractor kind of a recognizer. greediness  here meaning that it returns the first instance in the  dictionary that matches the feature vector extracted. exact  matching means that only an exact match is returned instead  of a list of the best matches as is commonly done in more  advanced recognizers. the features needed for recognizing  the characters used in the experiment include the first,  second, and third quadrant of a 2x2 grid (bounding box  divided in four) that the stroke enters, and the normalized  length of the stroke. the length was computed in three  different ways. first, only considering the movement along  the x-axis of the touchpad coordinate space. second, the  movement along the y-axis, and finally using the two- dimensional distances between consequent points within the  stroke.  as a consequence of the features of the recognizer, the  slices in the menu interpretation of the characters are not 90  degrees wide. the straight strokes (0, 3, 6, and 9) have slice  width of 30 degrees. the first part of the curved strokes has  an effective slice width of 60 degrees. the effective width  of the second part of the curved strokes depends on the  direction of the first part and the relative lengths of the  parts. in all cases, however, the effective width for the  second slice is greater or equal to 30 degrees.  evaluation  method  participants  6 people, all students or staff of the university of tampere,  volunteered to serve as unpaid test users in our experiment.  ages of the users varied between 21 and 30 years. three of  the users were male and three were female. none of them  had used a touchpad for extended periods of time before the  experiment. three users had owned and used an analog  wristwatch for several years and three had not. all users  were right handed.  apparatus  the participants sat in front of a regular office workstation.  they held the touchpad in their non-dominant hand and  used the index finger of the dominant hand to draw the  characters.  the computer display was positioned on the desk in front of  the subjects. there were two windows visible on the  display. the first of these was called the feedback window  (shown in figure 3). it showed the last stroke drawn or the  portion of the current stroke drawn so far. after the user  lifted his or her finger, the character was recognized and  shown on the upper left corner of the feedback window. in  case of the pure recognizer, a very short stroke (under 2  mm) was rejected and "too short" appeared instead of the  recognized character. also, if the recognizer in the hybrid  condition failed to recognize the character "unrecognized"  was written. the second window is the task window shown  in figure 4. it is our approximation of the kind of task that  mcqueen et al. used in their experiment with piepad. the  upper string of five numbers seen in figure 4 is the string to  be entered. correctly entered numbers appear below this  string. incorrect numbers were not accepted, but were  instead logged as errors. a “click” sound was played when  the task window received a character. the same sound was  played regardless of whether the character was correct or  not.  procedure  each test subject completed 20 sessions. there were at least  three hours, but no more than three days between two  consecutive sessions. each session consisted of two 15- minute subsessions: one for the pure clock-face design and  one for the hybrid design. the order of the subsessions was  switched for each session. each session ended with a  question on which of the two systems seemed better during  that session. with some setup time before each subsession  and short rest between the subsessions, each session lasted  approximately 35 minutes.   the first and last sessions were slightly longer. the first  session began with a short interview to collect the user  demographics. after that the experimental task was  introduced. next, a 5-minute session using the numeric  keypad on the keyboard was completed. after that first  session proceeded like all other sessions. on the last session  the exceptional activities were at the end. after completing  the regular 15-minute subsessions with the touchpad, the 5- minute keyboard session was repeated. the last session  ended with a short interview, during which the users were  given an opportunity to express their opinion on the  experiment. the background and the goals of the  experiment were also explained to those who wanted to  know.  within each subsession a new sequence of five numbers  was presented immediately after the user completed the  previous one. thus, the users were required to keep  entering the numbers continuously with no breaks. because  the users were instructed to work as fast and as few errors  as possible, we hoped that the degree to which the number    figure 4. the task window.  paper: input devices chi  changing the world, changing ourselves       28                         volume no. 4, issue no. 1


entry methods cause physical or mental fatigue would show  in the overall throughput and error rate.  design  the experimental design for comparing the two methods  was within subject factorial design with the writing method  (pure, hybrid) and amount of practice as the independent  factors. entry speed (throughput and timing of the strokes)  and error rate were measured as dependent variables.  results  throughput  the most interesting measure of performance for text entry  systems is the rate at which users can get their work done  despite the errors and other distractions that happen. as an  approximation of this measure we computed the average  number of correctly entered numbers per second over all  the users for each session. the result of this computation is  shown above in figure 5. in addition to the obvious main  effect of session a repeated measures anova (used to  compute all the f values reported in this paper) does not  show significant main effects or interactions. most  importantly the main effect of the system is not significant  (f1,5=4.48,p>0.05). although, this effect is not statistically  significant, we expect it to be real due to reasons given later  in this section.   in comparison to the standard keyboard numeric keypad  that represented the normal way of inputting numbers in our  experiment, both touchpad methods are slightly slower.  however, as indicated by the large overlap of the error bars  in figure 6, the differences are not significant. the number  for the keyboard is the average of the two 5-minute  sessions. the numbers for the touchpad-based methods are  averages over the last three sessions.  timing  for easy comparison with mcqueen et al., we measured the  time spent writing the characters using the same sub- categories. that is, in addition to the overall time used per  character, we measured the time that the finger was in  contact with the touchpad (scripting time) and the time  spent between the contacts (preparation time). the average  total time spent per correctly entered character is shown in  figure 7 (the upper two series labeled total). neither of the  two systems seems to be clearly faster than the other  (f1,5=0.049,p>0.05). the split into preparation and  scripting time reveals a difference between the systems. the  data in figure 7 suggests that the use of the hybrid method  leads to longer scripting times (f1,5=37.2, p<0.05). on the  other hand preparation times for the hybrid method seem to  be shorter (f1,5=5.56, p<0.1). these differences cancel each  other out resulting in roughly equal overall entry time. this  does not match the observed relationship between the  throughput means in figure 5. to understand why the  throughput curves differ from the mean entry time curves  for successfully entered characters we must consider the  effect that the unsuccessfully entered characters have on the  throughput. in other words, we need to take a look at the  error rates.  error rate  only correct input would allow the user to advance in the  task that we used in our experiment. all erroneous input  was therefore done in addition to the correct input. error  rates reported below are computed with the formula:  incorrectcorrect incorrectrateerror + =   so that if there is no correct input at all, the error rate is 1  (or 100%) and if there is no incorrect input at all, the error  rate is 0.  0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 1 3 5 7 9 11 13 15 17 19 session ch ar ac te rs  p er  s ec on d pure  hybrid figure 5. throughput in characters per second.  0 0.5 1 1.5 2 2.5  c ha ra ct er s  pe r s ec on d pure hybrid keyboard figure 6. average throughput for the three systems.  0 0.2 0.4 0.6 0.8 1 1.2 1.4 1 3 5 7 9 11 13 15 17 19 session se co nd s pure total hybrid total pure prep hybrid prep pure script hybrid script figure 7. time spent per correct character.  minneapolis, minnesota, usa • 20-25 april 2002                                                                                                               paper: input devices         volume no. 4, issue no. 1                         29


there are two kinds of excess input. first, there are strokes  that were not recognized. these include the too short ones  for the pure clock-face condition and the strokes of  unrecognizable shape in the hybrid condition. second, there  are characters that were recognized, but that were wrong,  that is they did not match the sequence in the model string.  first we will take a look at the total error rate that includes  both error types. in figure 8 we have the mean error rates  for both systems over all the sessions. the error bars show  the standard error of mean for each system and session. a  repeated measures anova shows a significant main effect  for the system (f1,5=45.6,p<0.01), but no other significant  effects. making more errors leaves less time for productive  work. therefore, this significant difference in error rate  substantiates our earlier claim for real difference in average  throughput.  during the experiment it became obvious that some  characters were more difficult to enter than others. figure 9  is an illustration of this. the data points are located on the  centers of the sectors in the clock-face design. the distance  from the center of the plot gives the error rate for the  character in question. the profile for the pure clock-face  design is similar to what mcqueen et al. reported for  piepad. the off-axis strokes were more error prone. in the  hybrid profile only strokes for 4, 5, and 7 show this  tendency.   although the hybrid clock-face method exhibits lower  overall error rate computed over all the sessions (10.2% for  hybrid vs. 14.6% for pure), there are further differences in  the behavior of the methods. namely the errors are  distributed differently into the two different error types.  figure 10 shows the different error types. the points  labeled “wrong” represent strokes that were recognized, but  resulted in input that was wrong at that point of time. the  points labeled “unrecog” represent strokes that were not  recognized because they were too short or had unknown  shape.   the pure clock-face design results in very low rate of  unrecognized strokes and relatively high rate of wrong  input. the hybrid design on the other hand has mediocre  error frequency in both error classes.  user preference  the end of session preference poll ended with total vote- count of 68 for the hybrid and 52 for the pure clock-face  design. five of the six users preferred the hybrid system  after the first session. four preferred the hybrid system after  the last session. given the small number of users, these  results cannot be taken as anything more than a weak  suggestion for possible general user preference for the  hybrid system.  discussion  error rate  in comparison to the results of mcqueen et al., we  measured a higher error rate for the pure clock-face design.  the error rate for the hybrid design during the last three  sessions was 9.8% which is close to 8.2% reported by  mcqueen et al. overall, using a handheld finger operated  touchpad instead of fixed stylus operated one seems to  increase the error rate.  the task in our experiment was not exactly the same that  mcqueen et al. used. they allowed all input of 5 characters  in length, whereas we allowed only correct input. this  difference may have affected user behavior in a way that  caused different error rates to be recorded. although we  were aware of this possibility, we felt that a cleaner  0 0.05 0.1 0.15 0.2 0 1 2 3 4 5 6 7 8 9 10 11 pure hybrid   figure 9. average error rate per character.  0 0.05 0.1 0.15 0.2 0 1 2 3 4 5 6 7 8 9 10 11 pure wrong hybrid wrong pure unrecog hybrid unrecog   figure 10. error types for both systems.  0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 1 3 5 7 9 11 13 15 17 19 session er ro r r at e hybrid pure figure 8. error rate.  paper: input devices chi  changing the world, changing ourselves       30                         volume no. 4, issue no. 1


definition for an error was desirable. in particular, in some  cases it is next to impossible to determine the exact number  of errors in the set-up used by mcqueen et al. for instance,  the user may have left out a character after which character  per character based error detection is incorrect if the user  follows the given string successfully after the missing  character. the problem becomes even more challenging if  the user notices that she is out of the sync and  resynchronizes herself in the middle of the task. our  solution is not perfect. real world applications rarely know  what user is supposed to enter and therefore do not behave  like our software. our practice, however, reduces the  ambiguity in error counting and simplifies the post- processing of the experiment logs.  one of the complaints that we got from the users was that  the hybrid system is sometimes too picky in its recognition.  characters that the users thought were ok were not  recognized. after the experiment we reviewed our character  set and found that we could indeed relax some of the  parameters given to the recognizer. we reran the data  recorded in the hybrid condition through the recognizer. on  average the number of unrecognized characters per session  decreased by 25 of which 7 were moved to the wrong  character category and 18 to the correct character category.  this changed the overall error rate for the hybrid system  from 10.2% to 9.3%. the percentage of unrecognized  hybrid strokes sank to 3.6%. this is getting close to 2.6%  measured for the pure clock-face design. this suggests that  there are very few serious attempts at number entry left  within the unrecognized hybrid category. instead it consists  mainly of accidental taps on the touchpad and truly  malformed strokes.  speed  our results for overall entry time per character by the end  of the experiment are about 100 ms longer than what  mcqueen et al. reported for the piepad. this can be partly  attributed to the higher error rate and the cost that errors  had in our experiment. in the piepad experiment users did  not need to react if they made a substitution error (by far the  most probable kind of error with piepad). in our case the  task would not proceed before correct input was received.  this meant that the user had to notice that an error occurred  and re-enter the character. this added cognitive  involvement might have slowed our users down in  comparison to the users of mcqueen et al.   another factor that may explain slower speed in our  experiment is the pacing of the task. we required a  continuous 15-minute effort whereas mcqueen et al. had  breaks after a block of ten 5-number groups. the rationale  behind this change in the procedure was aimed to tease out  differences between the systems caused by fatigue during  the rather demanding 15-minute effort. however, we found  nothing conclusive in the resulting data.  mcqueen et al. excluded the first number in each group of  5 from their analyses because the preparation time for that  number is confounded by the effort of perceiving the whole  group that just appeared. we excluded only the first  character in the session. this procedure may have the effect  of increasing the preparation times for one fifth of our data.  this is not a problem in the within study comparison that  we were mainly interested in, but may explain some of the  difference between our results and those reported by  mcqueen et al.  handwriting time can be modeled with some accuracy  based on the geometric form of the characters [2, 3, 10].  applying the model given in [10] yields a complexity  estimate of 1 for the straight lines and 2 for the curved ones.  this means that the average writing time for the hybrid  characters should be 0.6x2+0.4x1=1.6. this is 1.6 times the  estimate of 1 for the pure method. this ratio is very  different from the 1:1 ratio that we measured for the total  writing time. the explanation is that the model only models  the scripting time, not the preparation time and, therefore,  not the total writing time. our results do show a difference  in scripting time (see figure 7), but the difference, on  average, is only about 30 milliseconds, which translates to  ratio of 1.15 between the systems. a condensed summary  on these computations is given in table 1.  a closer inspection based on the steering law [2] reveals  that the smaller than expected difference can be partly  explained by the wider imaginary menu slices used in the  hybrid method. assuming that the number entry task can be  modeled with the basic steering law goal passing tasks, the  scripting time should follow linearly the steering law index  of difficulty computed as log2(a/w+1), where a is the  length of a goal passing task and w is the width of the goal.  we choose w to be the width of the slice at the end,  because we can assume that at the beginning the finger is  always perfectly positioned therefore always hitting the first  target. the index of difficulty for the strokes in the pure  condition is roughly log2(2/1+1)=1.58 bits. the difficulty of  the straight strokes in the hybrid condition is the same 1.58  bits. the acceptable proportions of the beginning of the  curved strokes, however, are different from the straight  strokes. they may deviate 30 degrees to both directions  table 1. index of difficulty estimates for the systems.   first  part  second  part  weighted   mean  ratio  geometric form of characters [10]   pure 1  1  hybrid 1 1 1.6  1.6  steering law [2]   pure 1.58  1.58  hybrid 1.58  1 2.18  1.37  minneapolis, minnesota, usa • 20-25 april 2002                                                                                                               paper: input devices         volume no. 4, issue no. 1                         31


making the width of the slice 60 degrees, which yields  index of difficulty of 1. a worst-case scenario for the latter  part of the curved strokes is a 30-degree slice (same as all  strokes in the pure condition. thus, the overall index of  difficulty for the curved strokes is 1+1.58=2.58 bits. the  average index of difficulty for the hybrid characters is  0.6x2.58+0.4x1.58=2.18. this yields a scripting time ratio  of 2.18/1.58=1.37 between the two systems. this is close to  the 1.15 ratio that we observed. because the index of  difficulty for the curved strokes is based on a worst-case  assumption, the observed ratio of scripting times should be  smaller than what was computed above.   even more detailed models of human hand motion would  not help in describing the number entry speed very  accurately. this is because hand motions are not the only  factor affecting writing speed. in our experiment the other  factors are represented by the preparation time. it accounts  for about two thirds of the total character entry time.  unfortunately, we do not have models for predicting  preparation time based on the shape of the characters.  conclusions  our experiment suggests that the hypothesis on the benefits  of the lower error rate and better performance exhibited by  the hybrid method may indeed be true. the error rate we  measured for the pure clock-face design used with a  handheld touchpad is higher than what mcqueen et al.  measured for stylus operated fixed tablet. therefore  strategies for reducing the error rate are more than  welcome. the hybrid design seems to reduce the error rate  significantly. however, the 9.8% error rate we measured  during the last three sessions is still higher than most users  would be willing to accept in general text entry situations  [7]. all in all, we have demonstrated that the clock-face  metaphor can be transferred to touchpad use without  significant loss of entry speed or increase in error rate.  acknowledgments  we wish to thank the volunteer test subjects for their effort,  scott mackenzie for inspiration, roope raisamo, and  several other researchers at tauchi for valuable  discussion. the work of the first author was financed by the  tampere graduate school in information science and  engineering. this work was supported by the academy of  finland (project 173987).  references  1. 3com corporation, graffiti.  http://www.palm.com/products/input/   2. accot, j., and zhai, s. beyond fitts' law: models for  trajectory-based hci tasks. proc. of the chi 97, 295- 302, acm, 1997.  3. accot, j., and zhai, s. performance evaluation of input  devices in trajectory-based tasks: an application of  the steering law. proc. of the chi 99, 466-472, acm,  1999.  4. bangay, s. cirque cat driver for linux. available at  http://cs.ru.ac.za/homes/cssb/cirque/   5. callahan, j., hopkins, d., weiser, m., and  shneiderman, b. an empirical comparison of pie vs.  linear menus. proc. of the chi 88, 95-100, acm,  1988.   6. e-acute, octave user's manual. available at  http://www.e-acute.fr/english/manual/manualv1.html   7. lalomia, m.j. user acceptance of handwritten  recognition accuracy. chi 94 conference companion,  107, acm, 1994.  8. enns, n.r.n., and mackenzie, i.s. touchpad-based  remote control devices. chi 98 summary, 229- 230,acm, 1998.  9. goldberg, d., and richardson, k. touch-typing with a  stylus. proc. of the chi 93, 80-87. acm, 1993.  10. isokoski, p. model for unistroke writing time. chi  letters: human factors in computing systems, chi  2001, 3(1): 357-364, acm, 2001.  11. isokoski, p., and raisamo, r. device independent text  input: a rationale and an example. proc. of the  working conference on advanced visual interfaces  avi2000, 76-83, acm press, 2000.  12. kurtenbach, g., and buxton, w. user learning and  performance with marking menus. proc. of the chi94,  258-264, acm, 1994.   13. kurtenbach, g., and buxton, w. the limits of expert  performance using hierarchic marking menus. proc. of  interchi '93, 482-487, acm, 1993.   14. kurtenbach, g., sellen, a., and buxton, b. an  empirical evaluation of some articulatory and  cognitive aspects of marking menus. human- computer interaction, 8, 1-23, 1993.  15. mackenzie, i.s., nonnecke, b., riddersma, s.,  mcqueen, c., and meltz, m. alphanumeric entry on  pen-based computers. international journal of human- computer studies, 41, 775-792, 1994.  16. mankoff, j., and abowd, g.d. cirrin: a word-level  unistroke keyboard for pen input. proc. of the acm  uist 98, 213-214, acm, 1998.  17. mcqueen, c., mackenzie, i.s., and zhang, s.x. an  extended study of numeric entry on pen-based  computers. proc. of graphics interface '95, 215-222,  canadian information processing society, 1995.  18. perlin, k. quikwriting: continuous stylus-based text  entry. proc.of the acm uist 98, 215-216, acm, 1998.  19. venolia, d., and neiberg, f. t-cube: a fast, self- disclosing pen-based alphabet. proc. of the chi 94,  265-270, acm, 1994.    paper: input devices chi  changing the world, changing ourselves       32                         volume no. 4, issue no. 1
